<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[m78snail]]></title>
  <link href="m78snail.com/atom.xml" rel="self"/>
  <link href="m78snail.com/"/>
  <updated>2017-02-16T14:38:52+08:00</updated>
  <id>m78snail.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[操作系统]]></title>
    <link href="m78snail.com/14872090613431.html"/>
    <updated>2017-02-16T09:37:41+08:00</updated>
    <id>m78snail.com/14872090613431.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">1. 进程和线程的区别。</h2>

<p>线程和进程的主要区别是:他们是操作系统不同的管理系统资源的方式。进程拥有独立的地址空间，一个进程崩溃后，在保护模式下不会对其他的进程造成任何的影响，而线程只是进程不同的执行路径而已。线程有自己的堆栈和局部变量，但是线程没有独立的地址空间。通常可以将线程看成是一个轻量级的进程。</p>

<span id="more"></span><!-- more -->

<p>在 <strong>cpu 的调度方面</strong>，线程是调度的基本单位。并且线程的调度是比较轻量级的，提高了系统的并发性能。同一进程中的线程调度不会引起进程的调度，但是不同进程之间的线程切换还是会引起进程的切换的。<br/>
在<strong>执行过程</strong>来看，进程拥有独立的内存单元，同一进程下的线程可以共享改内存区域，提高了运行效率。<br/>
从<strong>逻辑角度</strong>来看：（重要区别）多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但是，操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理及资源分配。</p>

<h2 id="toc_1">2. 死锁的必要条件，怎么处理死锁。</h2>

<p><strong>四个必要条件：</strong><br/>
　　1.互斥条件：一个资源每次只能被一个进程使用。<br/>
　　2.请求与保持条件：一个进程因请求资源而阻塞，对已获得的资源保持不放。<br/>
　　3.不剥夺条件：进程获得的资源，在未使用完之前，不可以强行剥夺。<br/>
　　4.循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系<br/>
<strong>处理死锁：</strong><br/>
1.死锁的预防：破坏四个死锁的条件，但是都没一定的局限性，相应系统的执行效率<br/>
2.死锁的避免：银行家算法。<br/>
3.死锁的解决：<br/>
　　(1) 最简单，最常用的方法就是进行系统的重新启动，不过这种方法代价很大，它意<br/>
味着在这之前所有的进程已经完成的计算工作都将付之东流，包括参与死锁的那些进程，以及未参与死锁的进程。<br/>
　　(2) 撤消进程，剥夺资源。终止参与死锁的进程，收回它们占有的资源，从而解除死锁。这时又分两种情况：一次性撤消参与死锁的全部进程，剥夺全部资源；或者逐步撤消参与死锁的进程，逐步收回死锁进程占有的资源。一般来说，选择逐步撤消的进程时要按照一定的原则进行，目的是撤消那些代价最小的进程，比如按进程的优先级确定进程的代价；考虑进程运行时的代价和与此进程相关的外部作业的代价等因素。</p>

<h2 id="toc_2">3. Window 内存管理方式：段存储，页存储，段页存储。</h2>

<p><strong>分页存储管理基本思想：</strong><br/>
用户程序的地址空间被划分成若干固定大小的区域，称为“页”，相应地，内存空间分成若干个物理块，页和块的大小相等。可将用户程序的任一页放在内存的任一块中，实现了离散分配。<br/>
页式管理的优点是没有外碎片，每个内碎片不超过页的大小。缺点是,程序全部装入内存，要求有相应的硬件支持。<br/>
<strong>分段存储管理基本思想：</strong><br/>
将用户程序地址空间分成若干个大小不等的段，每段可以定义一组相对完整的逻辑信息。存储分配时，以段为单位，段与段在内存中可以不相邻接，也实现了离散分配。段式管理优点是可以分别编写和编译，可以针对不同类型的段采用不同的保护，可以按段为单位来进行共享，包括通过动态链接进行代码共享。缺点是会产生碎片。<br/>
<strong>段页式存储管理基本思想：</strong><br/>
分页系统能有效地提高内存的利用率，而分段系统能反映程序的逻辑结构，便于段的共享与保护，将分页与分段两种存储方式结合起来，就形成了段页式存储管理方式。<br/>
在段页式存储管理系统中，作业的地址空间首先被分成若干个逻辑分段，每段都有自己的段号，然后再将每段分成若干个大小相等的页。对于主存空间也分成大小相等的页，主存的分配以页为单位。段页式系统中，作业的地址结构包含三部分的内容：段号 页号 页内位移量程序员按照分段系统的地址结构将地址分为段号与段内位移量，地址变换机构将段内位移量分解为页号和页内位移量。为实现段页式存储管理，系统应为每个进程设置一个段表，包括每段的段号，该段的页表始址和页表长度。每个段有自己的页表，记录段中的每一页的页号和存放在主存中的物理块号。段页式管理是段式管理与页式管理方案结合而成的所以具有他们两者的优点。但反过来说，由于管理软件的增加，复杂性和开销也就随之增加了。</p>

<h2 id="toc_3">4. 进程的几种状态</h2>

<p>创建，就绪，运行，阻塞，退出。<br/>
1）就绪——执行：对就绪状态的进程，当进程调度程序按一种选定的策略从中选中一个就绪进程，为之分配了处理机后，该进程便由就绪状态变为执行状态；<br/>
2）执行——阻塞：正在执行的进程因发生某等待事件而无法执行，则进程由执行状态变为<br/>
阻塞状态，如进程提出输入/输出请求而变成等待外部设备传输信息的状态，进程申请资源（主存空间或外部设备）得不到满足时变成等待资源状态，进程运行中出现了故障（程序出错或主存储器读写错等）变成等待干预状态等等；<br/>
3）阻塞——就绪：处于阻塞状态的进程，在其等待的事件已经发生，如输入/输出完成，资源得到满足或错误处理完毕时，处于等待状态的进程并不马上转入执行状态，而是先转入就绪状态，然后再由系统进程调度程序在适当的时候将该进程转为执行状态；<br/>
4）执行——就绪：正在执行的进程，因时间片用完而被暂停执行，或在采用抢先式优先级调度算法的系统中,当有更高优先级的进程要运行而被迫让出处理机时，该进程便由执行状态转变为就绪状态。</p>

<h2 id="toc_4">5. IPC 几种通信方式。</h2>

<p><img src="media/14872090613431/14872112791305.jpg" alt="" class="mw_img_center" style="width:400px;display: block; clear:both; margin: 0 auto;"/><br/>
<strong>信号量</strong>:<br/>
信号机制是 UNIX 为进程中断处理而设置的。它只是一组预定义的值，因此不能用于信息交换，仅用于进程中断控制。例如在发生浮点错、非法内存访问、执行无 效指令、某些按键（如 ctrl-c、del 等）等都会产生一个信号，操作系统就会调用有关的系统调用或用户定义的处理过程来处理。<br/>
<strong>管道</strong>:<br/>
无名管道实际上是内存中的一个临时存储区，它由系统安全控制，并且独立于创建它的进程的内存区。管道对数据采用先进先出方式管理，并严格按顺序操作，例如不能对管道进行搜索，管道中的信息只能读一次。无名管道只能用于两个相互协作的进程之间的通信，并且访问无名管道的进程必须有共同的祖先。有名管道的操作和无名管道类似，不同的地方在于使用有名管道的进程不需要具有共同的祖<br/>
先，其它进程，只要知道该管道的名字，就可以访问它。管道非常适合进程之间快速交换信<br/>
息。<br/>
<strong>共享储存段</strong>:<br/>
共享存储段是主存的一部分，它由一个或多个独立的进程共享。各进程的数据段与共享存储段相关联，对每个进程来说，共享存储段有不同的虚拟地址。<br/>
<strong>信号灯</strong>:<br/>
信号灯是一组进程共享的数据结构，当几个进程竞争同一资源时（文件、共享内存或消息队列等），它们的操作便由信号灯来同步，以防止互相干扰。<br/>
信号灯保证了某一时刻只有一个进程访问某一临界资源，所有请求该资源的其它进程都将被挂起，一旦该资源得到释放，系统才允许其它进程访问该资源。信号灯通常配对使用，以便实现资源的加锁和解锁。<br/>
<strong>进程间通信的实现技术的特点是</strong>：操作系统提供实现机制和编程接口，由用户在程序中实现，保证进程间可以进行快速的信息交换和大量数据的共享。但是,上述方式主要适合在同一台计算机系统内部的进程之间的通信。</p>

<h2 id="toc_5">6. 什么是存虚拟内。</h2>

<p>虚拟内存是计算机系统内存管理的一种技术。 它使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。</p>

<h2 id="toc_6">7. 虚拟地址、逻辑地址、线性地址、物理地址的区别。</h2>

<p><strong>逻辑地址</strong>（Logical Address） 是指由程序产生的与段相关的偏移地址部分。例如，你在进行C 语言指针编程中，可以读取指针变量本身值(&amp;操作)，实际上这个值就是逻辑地址，它是相对于你当前进程数据段的地址，不和绝对物理地址相干。只有在 Intel 实模式下，逻辑地址才和物理地址相等（因为实模式没有分段或分页机制,Cpu 不进行自动地址转换）；逻辑也就是在 Intel 保护模式下程序执行代码段限长内的偏移地址（假定代码段、数据段如果完全一样）。应用程序员仅需与逻辑地址打交道，而分段和分页机制对您来说是完全透明的，仅由系统编程人员涉及。应用程序员虽然自己可以直接操作内存，那也只能在操作系统给你分<br/>
配的内存段操作。<br/>
<strong>线性地址</strong>（Linear Address） 是逻辑地址到物理地址变换之间的中间层。程序代码会产生逻辑地址，或者说是段中的偏移地址，加上相应段的基地址就生成了一个线性地址。如果启用了分页机制，那么线性地址可以再经变换以产生一个物理地址。若没有启用分页机制，那么线性地址直接就是物理地址。Intel 80386 的线性地址空间容量为 4G（2 的 32 次方即 32 根地<br/>
址总线寻址）。<br/>
<strong>物理地址</strong>（Physical Address） 是指出现在 CPU 外部地址总线上的寻址物理内存的地址信号，是地址变换的最终结果地址。如果启用了分页机制，那么线性地址会使用页目录和页表中的项变换成物理地址。如果没有启用分页机制，那么线性地址就直接成为物理地址了。<br/>
<strong>虚拟内存</strong>（Virtual Memory） 是指计算机呈现出要比实际拥有的内存大得多的内存量。因此它允许程序员编制并运行比实际系统拥有的内存大得多的程序。这使得许多大型项目也能够在具有有限内存资源的系统上实现。一个很恰当的比喻是：你不需要很长的轨道就可以让一列火车从上海开到北京。你只需要足够长的铁轨（比如说 3 公里）就可以完成这个任务。采取的方法是把后面的铁轨立刻铺到火车的前面，只要你的操作足够快并能满足要求，列车就能象在一条完整的轨道上运行。这也就是虚拟内存管理需要完成的任务。在 Linux 0.11 内核中，给每个程序（进程）都划分了总容量为 64MB 的虚拟内存空间。因此程序的逻辑地址范围是0x0000000 到0x4000000。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[装饰模式之女朋友系列之化妆篇]]></title>
    <link href="m78snail.com/14871457028090.html"/>
    <updated>2017-02-15T16:01:42+08:00</updated>
    <id>m78snail.com/14871457028090.html</id>
    <content type="html"><![CDATA[
<ul>
<li>上次说到，有了妹子，并且过上了幸福的生活.</li>
<li>今天周末，我们当然要出去逛街了(shopping是必不可少的么-_-)，可是她化妆画了好久还没好.</li>
<li>这时候我看到她的那些个瓶瓶罐罐，灵机一动.</li>
<li>&quot;诶，你在这化妆的流程倒让我想起了一种设计模式，要不要听听&quot;</li>
<li>&quot;你给老子滚...&quot;</li>
<li>&quot;听听么...装饰模式耶&quot;在她怒目的注视下，我就开始BB了...</li>
</ul>

<span id="more"></span><!-- more -->

<p><strong>用代码来化妆就是:</strong></p>

<pre><code>// 先来一个抽象的脸(piapia, &quot;别抽脸...&quot;)
public abstract class Face {
      // 化妆不就是要展示出来么，那就show一个
      public abstract void show();
}
</code></pre>

<pre><code>// 在来个女朋友类
public class GirlFriend extends Face {
      @Override
      public void show() {
            System.out.println(&quot;I am the yunnan girl.&quot;);
      }
}
</code></pre>

<pre><code>// 粉底
public class FenDiDecorator extends Decorator {
      @Override
      public void show() {
            // 先执行父类的职责，要不之前的妆就白画了
            super.show();
            System.out.println(&quot;With fendi.&quot;);
      }
}
</code></pre>

<pre><code>// 画眼线
public class YanXianDecorator extends Decorator {
      @Override
      public void show() {
            super.show();
            System.out.println(&quot;With yanxian.&quot;);
      }
}
</code></pre>

<pre><code>// 其他化妆品
public class OtherDecorator extends Decorator {
      @Override
      public void show() {
            super.show();
            System.out.println(&quot;With other huazhuangpin.&quot;);
      }
}
</code></pre>

<pre><code>// 开始化妆
public class DecoratorMain {
      public static void main(String[] args) {
            Face girlFriendFace = new GirlFriend();
            Decorator fenDiFace = new FenDiDecorator();
            Decorator yanXianFace = new YanXianDecorator();
            Decorator otherFace = new OtherDecorator();

            // 给画粉底的类，设定一个Face
            fenDiFace.setFace(girlFriendFace);
            // 给画眼线的类，设定一个画过粉底的Face
            yanXianFace.setFace(fenDiFace);
            otherFace.setFace(yanXianFace);
            // 都画完之后展示出来
            otherFace.show();
      }
}

// 化完妆是这样滴...(忽略化妆的顺序啥的...我也不懂)
I am the yunnan girl.
With fendi.
With yanxian.
With other huazhuangpin.
</code></pre>

<p>装饰模式: 动态地给一个对象添加一些额外的职责，就能增加功能来说，装饰者模式比生成子类更为灵活.<br/>
<img src="media/14871457028090/14871461201224.jpg" alt="" class="mw_img_center" style="width:400px;display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>我还在滔滔不绝的说着，只听到</li>
<li>&quot;哎呀，太墨迹了，不画了&quot;</li>
<li>我: &quot;别啊，你这还没画完啊，那还不如不画呢&quot;</li>
<li>&quot;就这样，咋地&quot;</li>
<li>我: &quot;等会儿哦，亲...&quot;</li>
</ul>

<pre><code>// 来个卸妆的装饰类
public class XieZhuangDecorator extends Decorator {
      @Override
      public void show() {
            super.show();
            System.out.println(&quot;Xie zhuang.&quot;);
      }
}
</code></pre>

<pre><code>public class DecoratorMain {
      public static void main(String[] args) {
            Face girlFriend = new GirlFriend();
            Decorator fenDiFace = new FenDiDecorator();
            Decorator yanXianFace = new YanXianDecorator();
            Decorator otherFace = new OtherDecorator();

            fenDiFace.setFace(girlFriend);
            yanXianFace.setFace(fenDiFace);
            otherFace.setFace(yanXianFace);

            // 只需要在最后的步骤上，加上一个(装饰)就行了
            Decorator xieZhuangFace = new XieZhuangDecorator();
            xieZhuangFace.setFace(otherFace);
            xieZhuangFace.show();

      }
}

// 最后的状态是卸妆了，之前的代码一点没变，只增加一个装饰类就可以了. 
I am the yunnan girl.
With fendi.
With yanxian.
With other huazhuangpin.
Xie zhuang.
</code></pre>

<ul>
<li>&quot;你看，这个模式不错吧，想改就改&quot;</li>
<li>&quot;更何况，还是素颜好看...嘿嘿嘿...&quot;</li>
<li>&quot;诶诶诶，打人不打脸...-_-&quot;</li>
</ul>

<p><strong>就这样，我和我的云南妹子过着幸福的生活.</strong></p>

<p>转载自：<a href="http://www.jianshu.com/p/53856bf285ed">http://www.jianshu.com/p/53856bf285ed</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Https完全解析 与 okHttp的结合]]></title>
    <link href="m78snail.com/14829144540758.html"/>
    <updated>2016-12-28T16:40:54+08:00</updated>
    <id>m78snail.com/14829144540758.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">一、概述</h2>

<p>　　首先要了解的事，okhttp默认情况下是支持https协议的网站的，比如<br/>
<a href="https://www.baidu.com">https://www.baidu.com</a> <a href="https://github.com/hongyangAndroid/okhttp-utils">https://github.com/hongyangAndroid/okhttp-utils</a> 等， 你可以直接通过okhttp请求试试。不过要注意的是，支持的https的网站基本都是CA机构颁发的证书，默认情况下是可以信任的。</p>

<span id="more"></span><!-- more -->

<p>　　当然我们今天要说的是自签名的网站，什么叫自签名呢？就是自己通过keytool去生成一个证书，然后使用，并不是CA机构去颁发的。使用自签名证书的网站，大家在使用浏览器访问的时候，一般都是报风险警告，好在有个大名鼎鼎的网站就是这么干的，<a href="https://kyfw.12306.cn/otn/%EF%BC%8C">https://kyfw.12306.cn/otn/，</a> 点击进入12306的购票页面就能看到了。<br/>
　　如下界面：<br/>
　　<img src="media/14812722672589/14812727587733.jpg" alt=""/></p>

<p>　　大家可以尝试拿okhttp访问下:</p>

<pre><code>OkHttpClientManager.getAsyn
    (&quot;https://kyfw.12306.cn/otn/&quot;, callack);    
</code></pre>

<p>　　好了，本篇博文当然不是去说如何去访问12306，而是以12306为例子来说明如何去访问自签名证书的网站。因为部分开发者app与自己服务端交互的时候可能也会遇到自签名证书的。甚至在开发安全级别很高的app时，需要用到双向证书的验证。</p>

<p>那么本篇博文的基本内容包含：</p>

<ul>
<li>https一些相关的知识</li>
<li>okhttp访问自签名https网站</li>
<li>如何构建一个支持https的服务器（这里主要为了测试多个证书的时候，如何去加载）</li>
<li>如何进行双向证书验证</li>
</ul>

<h2 id="toc_1">二、Https相关知识</h2>

<p>　　关于特别理论的东西大家可以百度下自己去了解下，这里就简单说一下，HTTPS相当于HTTP的安全版本了，为什么安全呢？</p>

<p>　　因为它在HTTP的之下加入了SSL (Secure Socket Layer)，安全的基础就靠这个SSL了。SSL位于TCP/IP和HTTP协议之间，那么它到底能干嘛呢？<br/>
它能够：</p>

<ul>
<li> 认证用户和服务器，确保数据发送到正确的客户机和服务器；(验证证书)</li>
<li>加密数据以防止数据中途被窃取；（加密）</li>
<li>维护数据的完整性，确保数据在传输过程中不被改变。（摘要算法）</li>
</ul>

<p>　　下面我们简单描述下HTTPS的工作原理，大家就能对应的看到上面3条作用的身影了：<br/>
　　HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。握手过程的简单描述如下：<br/>
　　1. 浏览器将自己支持的一套加密算法、HASH算法发送给网站。<br/>
　　2.网站从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，加密公钥，以及证书的颁发机构等信息。<br/>
　　3. 浏览器获得网站证书之后，开始验证证书的合法性，如果证书信任，则生成一串随机数字作为通讯过程中对称加密的秘钥。然后取出证书中的公钥，将这串数字以及HASH的结果进行加密，然后发给网站。<br/>
　　4. 网站接收浏览器发来的数据之后，通过私钥进行解密，然后HASH校验，如果一致，则使用浏览器发来的数字串使加密一段握手消息发给浏览器。<br/>
　　5. 浏览器解密，并HASH校验，没有问题，则握手结束。接下来的传输过程将由之前浏览器生成的随机密码并利用对称加密算法进行加密。 <br/>
　　<br/>
　　握手过程中如果有任何错误，都会使加密连接断开，从而阻止了隐私信息的传输。<br/>
　　根据上面的流程，我们可以看到服务器端会有一个证书，在交互过程中客户端需要去验证证书的合法性，对于权威机构颁发的证书当然我们会直接认为合法。对于自己造的证书，那么我们就需要去校验合法性了，也就是说我们只需要让OkhttpClient去信任这个证书就可以畅通的进行通信了。</p>

<p>　　当然，对于自签名的网站的访问，网上的部分的做法是直接设置信任所有的证书，对于这种做法肯定是有风险的，所以这里我们不去介绍了，有需要自己去查。</p>

<p>　　下面我们去考虑，如何让OkHttpClient去信任我们的证书，接下里的例子就是靠12306这个福利站点了。</p>

<p>　　首先导出12306的证书，这里12306提供了下载地址：<a href="https://kyfw.12306.cn/otn/">12306证书点击下载</a></p>

<p>　　下载完成，解压拿到里面的srca.cer，一会需要使用。ps:即使没有提供下载，也可以通过浏览器导出的，自行百度。</p>

<h2 id="toc_2">三、代码</h2>

<h3 id="toc_3">（一）、访问自签名的网站</h3>

<p>　　首先把我们下载的srca.cer放到assets文件夹下，其实你可以随便放哪，反正能读取到就行。</p>

<p>　　然后在我们的OkHttpClientManager里面添加如下的方法：</p>

<pre><code>
public void setCertificates(InputStream... certificates)
{
    try
    {
        CertificateFactory certificateFactory = CertificateFactory.getInstance(&quot;X.509&quot;);
        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        keyStore.load(null);
        int index = 0;
        for (InputStream certificate : certificates)
        {
            String certificateAlias = Integer.toString(index++);
            keyStore.setCertificateEntry(certificateAlias, certificateFactory.generateCertificate(certificate));

            try
            {
                if (certificate != null)
                    certificate.close();
            } catch (IOException e)
            {
            }
        }

        SSLContext sslContext = SSLContext.getInstance(&quot;TLS&quot;);

        TrustManagerFactory trustManagerFactory = 
            TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); 

        trustManagerFactory.init(keyStore);
        sslContext.init
            (   
                null, 
                trustManagerFactory.getTrustManagers(), 
                new SecureRandom()
            );
       mOkHttpClient.setSslSocketFactory(sslContext.getSocketFactory());


    } catch (Exception e)
    {
        e.printStackTrace();
    } 

}
</code></pre>

<p>　　为了代码可读性，我把异常捕获的部分简化了，可以看到我们提供了一个方法传入InputStream流，InputStream就对应于我们证书的输入流。<br/>
　　代码内部，我们：<br/>
　　　　</p>

<ul>
<li><p>构造CertificateFactory对象，通过它的generateCertificate(is)方法得到Certificate。</p></li>
<li><p>然后讲得到的Certificate放入到keyStore中。</p></li>
<li><p>接下来利用keyStore去初始化我们的TrustManagerFactory</p></li>
<li><p>由trustManagerFactory.getTrustManagers获得TrustManager[]初始化我们的SSLContext</p></li>
<li><p>最后，设置我们mOkHttpClient.setSslSocketFactory即可。</p></li>
</ul>

<p>　　这样就完成了我们代码的编写，其实挺短的，当客户端进行SSL连接时，就可以根据我们设置的证书去决定是否信任服务端的证书。</p>

<p>　　记得在Application中进行初始化：<br/>
　　</p>

<pre><code>
public class MyApplication extends Application
{
   @Override
    public void onCreate()
    {
        super.onCreate();

        try
        {
            OkHttpClientManager.getInstance()
                    .setCertificates(getAssets().open(&quot;srca.cer&quot;));
        } catch (IOException e)
        {
            e.printStackTrace();
        }


}
</code></pre>

<p>　　到这就可以看到使用Okhttp可以很方便的应对自签名的网站的访问，只需要拿到包含公钥的证书即可。</p>

<h3 id="toc_4">（二）、使用字符串替代证书</h3>

<pre><code>zhydeMacBook-Pro:temp zhy$ keytool -printcert -rfc -file srca.cer
-----BEGIN CERTIFICATE-----
MIICmjCCAgOgAwIBAgIIbyZr5/jKH6QwDQYJKoZIhvcNAQEFBQAwRzELMAkGA1UEBhMCQ04xKTAn
BgNVBAoTIFNpbm9yYWlsIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MQ0wCwYDVQQDEwRTUkNBMB4X
DTA5MDUyNTA2NTYwMFoXDTI5MDUyMDA2NTYwMFowRzELMAkGA1UEBhMCQ04xKTAnBgNVBAoTIFNp
bm9yYWlsIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MQ0wCwYDVQQDEwRTUkNBMIGfMA0GCSqGSIb3
DQEBAQUAA4GNADCBiQKBgQDMpbNeb34p0GvLkZ6t72/OOba4mX2K/eZRWFfnuk8e5jKDH+9BgCb2
9bSotqPqTbxXWPxIOz8EjyUO3bfR5pQ8ovNTOlks2rS5BdMhoi4sUjCKi5ELiqtyww/XgY5iFqv6
D4Pw9QvOUcdRVSbPWo1DwMmH75It6pk/rARIFHEjWwIDAQABo4GOMIGLMB8GA1UdIwQYMBaAFHle
tne34lKDQ+3HUYhMY4UsAENYMAwGA1UdEwQFMAMBAf8wLgYDVR0fBCcwJTAjoCGgH4YdaHR0cDov
LzE5Mi4xNjguOS4xNDkvY3JsMS5jcmwwCwYDVR0PBAQDAgH+MB0GA1UdDgQWBBR5XrZ3t+JSg0Pt
x1GITGOFLABDWDANBgkqhkiG9w0BAQUFAAOBgQDGrAm2U/of1LbOnG2bnnQtgcVaBXiVJF8LKPaV
23XQ96HU8xfgSZMJS6U00WHAI7zp0q208RSUft9wDq9ee///VOhzR6Tebg9QfyPSohkBrhXQenvQ
og555S+C3eJAAVeNCTeMS3N/M5hzBRJAoffn3qoYdAO1Q8bTguOi+2849A==
-----END CERTIFICATE-----
</code></pre>

<p>　　使用keytool命令，以rfc样式输出。keytool命令是JDK里面自带的。</p>

<p>　　有了这个字符串以后，我们就不需要srca.cer这个文件了，直接编写以下代码：</p>

<pre><code>public class MyApplication extends Application
{
    private String CER_12306 = &quot;-----BEGIN CERTIFICATE-----\n&quot; +
            &quot;MIICmjCCAgOgAwIBAgIIbyZr5/jKH6QwDQYJKoZIhvcNAQEFBQAwRzELMAkGA1UEBhMCQ04xKTAn\n&quot; +
            &quot;BgNVBAoTIFNpbm9yYWlsIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MQ0wCwYDVQQDEwRTUkNBMB4X\n&quot; +
            &quot;DTA5MDUyNTA2NTYwMFoXDTI5MDUyMDA2NTYwMFowRzELMAkGA1UEBhMCQ04xKTAnBgNVBAoTIFNp\n&quot; +
            &quot;bm9yYWlsIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MQ0wCwYDVQQDEwRTUkNBMIGfMA0GCSqGSIb3\n&quot; +
            &quot;DQEBAQUAA4GNADCBiQKBgQDMpbNeb34p0GvLkZ6t72/OOba4mX2K/eZRWFfnuk8e5jKDH+9BgCb2\n&quot; +
            &quot;9bSotqPqTbxXWPxIOz8EjyUO3bfR5pQ8ovNTOlks2rS5BdMhoi4sUjCKi5ELiqtyww/XgY5iFqv6\n&quot; +
            &quot;D4Pw9QvOUcdRVSbPWo1DwMmH75It6pk/rARIFHEjWwIDAQABo4GOMIGLMB8GA1UdIwQYMBaAFHle\n&quot; +
            &quot;tne34lKDQ+3HUYhMY4UsAENYMAwGA1UdEwQFMAMBAf8wLgYDVR0fBCcwJTAjoCGgH4YdaHR0cDov\n&quot; +
            &quot;LzE5Mi4xNjguOS4xNDkvY3JsMS5jcmwwCwYDVR0PBAQDAgH+MB0GA1UdDgQWBBR5XrZ3t+JSg0Pt\n&quot; +
            &quot;x1GITGOFLABDWDANBgkqhkiG9w0BAQUFAAOBgQDGrAm2U/of1LbOnG2bnnQtgcVaBXiVJF8LKPaV\n&quot; +
            &quot;23XQ96HU8xfgSZMJS6U00WHAI7zp0q208RSUft9wDq9ee///VOhzR6Tebg9QfyPSohkBrhXQenvQ\n&quot; +
            &quot;og555S+C3eJAAVeNCTeMS3N/M5hzBRJAoffn3qoYdAO1Q8bTguOi+2849A==\n&quot; +
            &quot;-----END CERTIFICATE-----&quot;;

    @Override
    public void onCreate()
    {
        super.onCreate();

        OkHttpClientManager.getInstance()
                .setCertificates(new Buffer()
                        .writeUtf8(CER_12306)
                        .inputStream());
}
</code></pre>

<h2 id="toc_5">四. tomcat下使用自签名证书部署服务</h2>

<h3 id="toc_6">（一）生成证书</h3>

<p>　　如何生成证书呢？使用keytool非常简单。</p>

<pre><code>zhydeMacBook-Pro:temp zhy$ keytool -genkey -alias zhy_server -keyalg RSA -keystore zhy_server.jks -validity 3600 -storepass 123456
您的名字与姓氏是什么?
  [Unknown]:  zhang
您的组织单位名称是什么?
  [Unknown]:  zhang
您的组织名称是什么?
  [Unknown]:  zhang
您所在的城市或区域名称是什么?
  [Unknown]:  xian
您所在的省/市/自治区名称是什么?
  [Unknown]:  shanxi
该单位的双字母国家/地区代码是什么?
  [Unknown]:  cn
CN=zhang, OU=zhang, O=zhang, L=xian, ST=shanxi, C=cn是否正确?
  [否]:  y

输入 &lt;zhy_server&gt; 的密钥口令
    (如果和密钥库口令相同, 按回车):   
</code></pre>

<p>　　使用以上命令即可生成一个证书请求文件zhy_server.jks，注意密钥库口令为：123456.</p>

<p>接下来利用zhy_server.jks来签发证书：</p>

<pre><code>zhydeMacBook-Pro:temp zhy$ keytool -export -alias zhy_server 
 -file zhy_server.cer 
 -keystore zhy_server.jks 
 -storepass 123456 
</code></pre>

<p>　　即可生成包含公钥的证书zhy_server.cer。</p>

<h3 id="toc_7">(二)、配置Tomcat</h3>

<p>　　找到tomcat/conf/sever.xml文件，并以文本形式打开。<br/>
在Service标签中，加入：</p>

<pre><code>&lt;Connector SSLEnabled=&quot;true&quot; acceptCount=&quot;100&quot; clientAuth=&quot;false&quot; 
    disableUploadTimeout=&quot;true&quot; enableLookups=&quot;true&quot; keystoreFile=&quot;&quot; keystorePass=&quot;123456&quot; maxSpareThreads=&quot;75&quot; 
    maxThreads=&quot;200&quot; minSpareThreads=&quot;5&quot; port=&quot;8443&quot; 
    protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot; scheme=&quot;https&quot; 
    secure=&quot;true&quot; sslProtocol=&quot;TLS&quot;
    /&gt;
</code></pre>

<p>　　注意keystoreFile的值为我们刚才生成的jks文件的路径：/Users/zhy/ <br/>
temp/zhy_server.jks(填写你的路径).keystorePass值为密钥库密码:123456。</p>

<p>　　然后启动即可，对于命令行启动，依赖环境变量JAVA_HOME；如果在MyEclispe等IDE下启动就比较随意了。</p>

<p>　　启动成功以后，打开浏览器输入url:<a href="https://localhost:8443/%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E8%AF%81%E4%B9%A6%E4%B8%8D%E5%8F%AF%E4%BF%A1%E4%BB%BB%E7%9A%84%E8%AD%A6%E5%91%8A%E4%BA%86%E3%80%82%E9%80%89%E6%8B%A9%E6%89%93%E6%AD%BB%E4%B9%9F%E8%A6%81%E8%BF%9B%E5%85%A5%EF%BC%8C%E5%8D%B3%E5%8F%AF%E8%BF%9B%E5%85%A5tomcat%E9%BB%98%E8%AE%A4%E7%9A%84%E4%B8%BB%E9%A1%B5%EF%BC%9A">https://localhost:8443/即可看到证书不可信任的警告了。选择打死也要进入，即可进入tomcat默认的主页：</a><br/>
<img src="media/14829144540758/14829153068405.jpg" alt="" class="mw_img_center" style="width:200px;display: block; clear:both; margin: 0 auto;"/></p>

<p>　　如果你在此tomcat中部署了项目，即可按照如下url方式访问： <br/>
<a href="https://192.168.1.103:8443/%E9%A1%B9%E7%9B%AE%E5%90%8D/path%EF%BC%8C%E6%B2%A1%E6%9C%89%E9%83%A8%E7%BD%B2%E4%B9%9F%E6%B2%A1%E5%85%B3%E7%B3%BB%EF%BC%8C%E7%9B%B4%E6%8E%A5%E6%8B%BF%E9%BB%98%E8%AE%A4%E7%9A%84%E4%B8%BB%E9%A1%B5%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E4%BA%86%EF%BC%8C%E6%8B%BF%E5%AE%83%E7%9A%84html%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82">https://192.168.1.103:8443/项目名/path，没有部署也没关系，直接拿默认的主页进行测试了，拿它的html字符串。</a></p>

<p>　　对于访问，还需要说么，我们刚才已经生成了zhy_server.cer证书。你可以选择copy到assets，或者通过命令拿到内部包含的字符串。我们这里选择copy。</p>

<p>　　依然选择在Application中设置信任证书：</p>

<pre><code>public class MyApplication extends Application
{
    private String CER_12306 = &quot;省略...&quot;;

    @Override
    public void onCreate()
    {
        super.onCreate();

        try
        {
            OkHttpClientManager.getInstance()
            .setCertificates(
                    new Buffer()
                    .writeUtf8(CER_12306).inputStream(),
                     getAssets().open(&quot;zhy_server.cer&quot;)
                    );
        } catch (IOException e)
        {
            e.printStackTrace();
        }

    }
}
</code></pre>

<p>　　ok，这样就能正常访问你部署的https项目中的服务了，没有部署项目的尝试拿https://服务端ip:8443/测试即可。</p>

<p>　　注意：不要使用localhost，真机测试保证手机和服务器在同一局域网段内。</p>

<p>　　ok，到此我们介绍完了如果搭建https服务和如何访问，基本上可以应付极大部分的需求了。当然还是极少数的应用需要双向证书验证，比如银行、金融类app，我们一起来了解下。</p>

<p>　　我们已经生成了zhy_server.kjs和zhy_server.cer文件。</p>

<p>　　接下来按照生成证书的方式，再生成一对这样的文件，我们命名为:zhy_client.kjs,zhy_client.cer.</p>

<h2 id="toc_8">五、双向证书验证</h2>

<p>　　首先对于双向证书验证，也就是说，客户端也会有个“kjs文件”，服务器那边会同时有个“cer文件”与之对应。</p>

<p>　　我们已经生成了zhy_server.kjs和zhy_server.cer文件。</p>

<p>　　接下来按照生成证书的方式，再生成一对这样的文件，我们命名为:zhy_client.kjs,zhy_client.cer.</p>

<h2 id="toc_9">（一）配置服务端</h2>

<p>　　首先我们配置服务端：<br/>
服务端的配置比较简单，依然是刚才的Connector标签，不过需要添加些属性。</p>

<pre><code>&lt;Connector  其他属性与前面一致  
    clientAuth=&quot;true&quot;
    truststoreFile=&quot;/Users/zhy/temp/zhy_client.cer&quot; 
      /&gt; 
</code></pre>

<p>　　将clientAuth设置为true，并且多添加一个属性truststoreFile，理论上值为我们的cer文件。这么加入以后，尝试启动服务器，会发生错误：Invalid keystore format。说keystore的格式不合法。</p>

<p>　　我们需要对zhy_client.cer执行以下步骤，将证书添加到kjs文件中。</p>

<pre><code>keytool -import -alias zhy_client 
    -file zhy_client.cer -keystore zhy_client_for_sever.jks
</code></pre>

<p>接下里修改server.xml为：</p>

<pre><code>&lt;Connector  其他属性与前面一致 
    clientAuth=&quot;true&quot;
    truststoreFile=&quot;/Users/zhy/temp/zhy_client_for_sever.jks&quot; 
      /&gt; 
</code></pre>

<p>此时启动即可。</p>

<p>此时再拿浏览器已经无法访问到我们的服务了，会显示基于证书的身份验证失败。</p>

<p>我们将目标来到客户端，即我们的Android端，我们的Android端，如何设置kjs文件呢。</p>

<h3 id="toc_10">（二）配置app端</h3>

<p>　　目前我们app端依靠的应该是zhy_client.kjs。</p>

<p>　　ok，大家还记得，我们在支持https的时候调用了这么俩行代码：</p>

<pre><code>sslContext.init(null, trustManagerFactory.getTrustManagers(), 
    new SecureRandom());
mOkHttpClient.setSslSocketFactory(sslContext.getSocketFactory());
</code></pre>

<p>　　注意sslContext.init的第一个参数我们传入的是null，第一个参数的类型实际上是KeyManager[] km,主要就用于管理我们客户端的key。</p>

<p>于是代码可以这么写：</p>

<pre><code>public void setCertificates(InputStream... certificates)
{
    try
    {
        CertificateFactory certificateFactory = CertificateFactory.getInstance(&quot;X.509&quot;);
        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        keyStore.load(null);
        int index = 0;
        for (InputStream certificate : certificates)
        {
            String certificateAlias = Integer.toString(index++);
            keyStore.setCertificateEntry(certificateAlias, certificateFactory.generateCertificate(certificate));

            try
            {
                if (certificate != null)
                    certificate.close();
            } catch (IOException e)
            {
            }
        }

        SSLContext sslContext = SSLContext.getInstance(&quot;TLS&quot;);
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.
                getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(keyStore);

        //初始化keystore
        KeyStore clientKeyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        clientKeyStore.load(mContext.getAssets().open(&quot;zhy_client.jks&quot;), &quot;123456&quot;.toCharArray());

        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        keyManagerFactory.init(clientKeyStore, &quot;123456&quot;.toCharArray());

        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), new SecureRandom());
        mOkHttpClient.setSslSocketFactory(sslContext.getSocketFactory());


    } catch (Exception e)
    {
        e.printStackTrace();
    } 

}
</code></pre>

<p>核心代码其实就是：</p>

<pre><code>//初始化keystore
KeyStore clientKeyStore = KeyStore.getInstance(KeyStore.getDefaultType());
clientKeyStore.load(mContext.getAssets().open(&quot;zhy_client.jks&quot;), &quot;123456&quot;.toCharArray());

KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
keyManagerFactory.init(clientKeyStore, &quot;123456&quot;.toCharArray());

sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), new SecureRandom());
</code></pre>

<p>　　然而此时启动会报错：Java.io.IOException: Wrong version of key store.</p>

<p>为什么呢？</p>

<p>　　因为：Java平台默认识别jks格式的证书文件，但是android平台只识别bks格式的证书文件。</p>

<p>　　这么就纠结了，我们需要将我们的jks文件转化为bks文件，怎么转化呢？</p>

<p>　　这里的方式可能比较多，大家可以百度，我推荐一种方式：</p>

<p>–</p>

<p>　　去<a href="http://sourceforge.net/projects/portecle/files/">Portecle</a>下载<a href="http://sourceforge.net/projects/portecle/files/latest/download?source=files">Download portecle-1.9.zip (3.4 MB)</a>。</p>

<p>　　解压后，里面包含bcprov.jar文件，使用jave -jar bcprov.jar即可打开GUI界面。<br/>
<img src="media/14829144540758/14829160331258.jpg" alt="" class="mw_img_center" style="width:300px;display: block; clear:both; margin: 0 auto;"/><br/>
　　按照上图即可将zhy_client.jks转化为zhy_client.bks。</p>

<p>　　然后将zhy_client.bks拷贝到assets目录下，修改代码为：</p>

<pre><code>//初始化keystore
KeyStore clientKeyStore = KeyStore.getInstance(&quot;BKS&quot;);
clientKeyStore.load(mContext.getAssets().open(&quot;zhy_client.bks&quot;), &quot;123456&quot;.toCharArray());

KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
keyManagerFactory.init(clientKeyStore, &quot;123456&quot;.toCharArray());

sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), new SecureRandom());
</code></pre>

<p>　　再次运行即可。然后就成功的做到了双向的验证，关于双向这块大家了解下即可。</p>

<p>源码都在<a href="https://github.com/hongyangAndroid/okhttp-utils">https://github.com/hongyangAndroid/okhttp-utils</a>之中。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用力的人跑不远]]></title>
    <link href="m78snail.com/14779864279806.html"/>
    <updated>2016-11-01T15:47:07+08:00</updated>
    <id>m78snail.com/14779864279806.html</id>
    <content type="html"><![CDATA[
<p>写在前面：有阶段的自己，会用蛮力去学习一些东西，就是这东西不管是否适合目前自己的知识体系， 觉得学了之后会更牛逼就去学，但是这样的东西往往学了记不住。 学习的过程越用力反而显得越吃力， 太吃力的事情，自然就无法有恒心， 这就是很多人会觉得自己做事总是无法持之以恒的原因。</p>

<span id="more"></span><!-- more -->

<p>努力不应该是某种需要被时常觉知的东西，意志力是短期内会用完的精神能量。</p>

<p>真正坚持到最后的人靠的不是激情，而是恰到好处的喜欢和投入。</p>

<p>太用力的人更容易产生期望落差，更不愿接受自己找错了方向的事实——没有什么比这样的“失落”更能让人心寒的了，太用力的人大多都因心累而倒在了半途中。</p>

<p>精神上的用力并不会让你跑得更快，但是精神上的疲惫却可以让你停下。</p>

<p>人越用力，就会越想要得到及时的良好刺激。越用力的人对于正刺激的需求就越高，越不能忍受暂时的负反馈。遗憾的是，人生常常是没有下文的考卷，这种刺激来得太慢、太不稳定。</p>

<p>真正的坚持归于平静，靠的是温和的发力，而不是时时刻刻的刺激。</p>

<p>太用力的人增加了执行的功耗。纠结，是太用力的一种表现，造成内部的运转处于空转的状态——意识与行动的主观脱节；从心所欲，就是把运转效率最大化后的结果——所想即所为。执行阶段最大的敌人，是纠结，是埋怨，是内心的冲突——太用力，就是心理额外动作太多。想好之后就只管去做。</p>

<p>我一直告诫自己不要用力过猛，以保持自己对困难的顿感和不顺的接受程度。<br/>
短期的过度用力极容易造成身体和心理上的挫伤。哪怕你在做的事情非常重要，也要保证基本的休息和放松。</p>

<p>不论是以后的工作还是将来的创业，都要保持一颗平常心。你需要更多的“寸劲”而不是“用力感”。在找到受力点“all in”之前，一切都要顺势而行，自然随和。</p>

<p>人在学习的过程会经历一系列的过程，先是笨拙期，再是熟练期——这两个过程他虽然能运用出技能，但是头脑中仍然能感受到使用时的提取感。这两个阶段都需要用力，但是用力的程度却大幅度减小。</p>

<p>技能掌握的最后阶段是运用自如期，就是张三丰把太极拳的形态全部都忘了的阶段。这个时候头脑中已经能下意识地去进行活动，达到了能耗最低的理想阶段。</p>

<p>从用力感，到毫无感觉，是一种技能掌握上的纯熟。年轻的时候太认真是件好事，或许只有用力过了，才能体会从心所欲、顺其自然的难得。</p>

<p>IT人员怎么用力<br/>
总有在校的学生问我现在 X,Y,Z... 技术很火热，应该学哪个？ 我看他列出的那些准备学习的选项中，其实前景和热门程度都差不多。 这让他陷入了选择焦虑症，不管做什么决定都怕「一失足成千古恨」。</p>

<p>对技术发展趋势关心是好事，就像之前那篇「不要总是选择困难模式」里面说的那样。 但是其实在「不要总是选择困难模式」里面忽略了很重要的一点，就是你个人的兴趣。 比如有的人对苹果的东西有天生的热爱，所以选择「iOS开发」对他来说就更容易做好。 尽可能选择会让自己 Enjoy 的技术方向，路还很长，不享受过程的话容易半途而废。</p>

<p>『太用力的人跑不远』</p>

<p>有阶段的自己，会用蛮力去学习一些东西，就是这东西不管是否适合目前自己的知识体系， 觉得学了之后会更牛逼就去学，但是这样的东西往往学了记不住。 学习的过程越用力反而显得越吃力， 太吃力的事情，自然就无法有恒心， 这就是很多人会觉得自己做事总是无法持之以恒的原因。</p>

<p>记得之前本科的时候喜欢和舍友一起打Dota，打Dota开局之前一般要等人齐， 等人的这段时间我有时候会切出来写写代码，叫舍友开局了告诉我一声。 然后别人看到我在打Dota间隙都在写代码，就觉得我有多努力多努力，给人了一种非常「刻苦」的印象。 以至于上次和一个本科同学吃饭他还说起这个事情，觉得我能做到这样非常「牛逼」。</p>

<p>但是其实这样的事情，如果对于真的对写代码有经历过热爱的人，是不会觉得有多么刻苦的事情。 这是自然而然的事情，甚至其实有些代码，那种满足好奇心的快感，是比打游戏有意思的多， 是件很Enjoy的事情，而不是所谓的「刻苦」。</p>

<p>就像跑步，「太用力的人跑不远」。</p>

<p>『不要用蛮力去学编程』</p>

<p>记得当年初学 C++ 的同学，听别人说 C++ 很基础也很重要的一个知识点就是STL， 然后听说要学好 STL 就应该去看看侯捷的「STL源码剖析」。 然后就买了书硬啃，然后没啃几天就放弃了，觉得太讳莫如深了没法理解。</p>

<p>但是如果换个学习的方式， 先假设现在没有STL这个标准库， 让你用已有的C++语法知识去自己写一个仿造STL标准库的功能， 哪怕是最最简单的 vector 。 你在编写的时候就会自然而然得体会到内存动态扩展的一些缺点和潜在的坑。 会知道为什么适当使用 reserve 和 swap 能非常明显的提高性能。</p>

<p>然后在自己思考的过程中会提出很多相关的疑惑， 带着疑惑再去翻看「STL源码剖析」， 就会让你对一个个数据结构恍然大悟知根知底。 自然而然你的看书体验会非常的 Enjoy， 而不是觉得苦涩难咽。</p>

<p>编程和求知本身是一件愉悦身心的事情， 如果只是为了高薪，而用蛮力去写代码，只会让自己疲惫不堪。</p>

<p>『最后』</p>

<p>希望对在学习编程的路上很挣扎的朋友有所帮助。 毕竟工作是生活的很大一部分， 如果工作不开心，生活怎么办。</p>

<p>寄语<br/>
生活可能像一根弹簧，最好的状态是张弛有度，太紧-压力太大，太松-没有活力，像那位矮大紧所说的，生活不只有眼前的苟且还有诗和远方。</p>

<pre><code>文章是我在csdn上看到的，我觉得写的特别好，所以转到自己的blog来。
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 常用方法]]></title>
    <link href="m78snail.com/14779861870049.html"/>
    <updated>2016-11-01T15:43:07+08:00</updated>
    <id>m78snail.com/14779861870049.html</id>
    <content type="html"><![CDATA[
<p>下面总结一下自己在学习Git时用到的一些语法<br/>
更多详细内容请浏览：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程 - 廖雪峰的官方网站</a></p>

<h2 id="toc_0">一 . 修改文件</h2>

<pre><code>git init：创建git
git add readme.txt ：将readme.txt变化提交到库
git status ：获取修改的状态
git diff readme.txt：获取我们与库中哪里不同
git commit :将修改提交到库中
</code></pre>

<span id="more"></span><!-- more -->

<h2 id="toc_1">二 . 回溯版本</h2>

<pre><code>git log：显示从最近到最远的提交日志
git log --pretty=oneline ：简化日志
git reset --hard HEAD^ ：HEAD代表当前版本，一个代表上一版
git reflog：获取记录的commit id
git reset --hard (commit id) :回溯到指定id的版本
</code></pre>

<h2 id="toc_2">三 . 撤销修改</h2>

<pre><code>git checkout -- file :撤销回到最近一次git commit或git add时的状态
git reset HEAD file : 把暂存区的修改撤销掉
</code></pre>

<h2 id="toc_3">四 . 删除文件</h2>

<pre><code>rm test.txt :删除test.txt
git rm test.txt：将删除操作提交到暂存区，commit之后版本里的删除
git checkout -- test.txt :用版本库里的版本替换工作区的版本
</code></pre>

<h2 id="toc_4">五 . 远程库</h2>

<pre><code>git remote add origin git@github.com:username/name.git :添加远程库
git push -u origin master :第一次将本地库传送到远程库
git push origin master :将本地库传送到远程库 #### 2.从远程库克隆
git clone git@github.com:username/name.git :克隆一个本地库
</code></pre>

<h2 id="toc_5">六 . 分支管理</h2>

<h3 id="toc_6">1. 创建与合并分支</h3>

<pre><code>git checkout -b dev :git checkout 命令加上-b参数表示创建分支并切换
git branch : 查看当前分支,列出所有分支
git checkout master :切换回主分支
git merge dev ：合并指定分支dev到当前分支
git branch -d dev ：删除分支dev
</code></pre>

<h3 id="toc_7">2. 解决冲突</h3>

<pre><code>git log ：看到分支的合并情况
git merge --no-ff -m &quot;merge with no-ff&quot; dev :加上--no-ff参数就可以用普通模式合并，合并后的历史有分支
</code></pre>

<h3 id="toc_8">3. Bug分支</h3>

<pre><code>git stash :把当前工作现场“储藏”起来，以后恢复现场后继续工作
git stash list :查看stash
git stash apply :恢复工作，但是恢复后，stash内容并不删除
git stash drop :删除stash
git stash pop ：恢复的同时把stash内容也删了
</code></pre>

<h3 id="toc_9">4. Feature分支</h3>

<h4 id="toc_10">(1). 多人协作</h4>

<p>先用git pull把最新的提交从origin/dev抓下来,遇到错误的话<br/>
git branch --set-upstream dev origin/dev :指定本地dev分支与远程origin/dev分支的链接，再pull<br/>
合并冲突，需要手动解决<br/>
解决后，提交，再push : git push origin dev。<br/>
git clone只能clone远程库的master分支，无法clone所有分支，解决办法如下：</p>

<pre><code>1. 找一个干净目录，假设是git_work
2. cd git_work
3. git clone http://myrepo.xxx.com/project/.git ,这样在git_work目录下得到一个project子目录
4. cd project
5. git branch -a，列出所有分支名称如下： remotes/origin/dev remotes/origin/release
6. git checkout -b dev origin/dev，作用是checkout远程的dev分支，在本地起名为dev分支，并切换到本地的dev分支
7. git checkout -b release origin/release，作用参见上一步解释
8. git checkout dev，切换回dev分支，并开始开发。
</code></pre>

<h4 id="toc_11">(2). 多人协作的工作模式通常是这样：</h4>

<p>　　首先，可以试图用git push origin branch-name推送自己的修改；</p>

<p>　　如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</p>

<p>　　如果合并有冲突，则解决冲突，并在本地提交；没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。</p>

<p>　　这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>

<h2 id="toc_12">七. Github 的使用</h2>

<p>　　如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页<a href="https://github.com/twbs/bootstrap">https://github.com/twbs/bootstrap</a><br/>
点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：</p>

<p>git clone <a href="mailto:git@github.com">git@github.com</a>:michaelliao/bootstrap.git<br/>
　　一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址<a href="mailto:git@github.com">git@github.com</a>:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。<br/>
　　如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。<br/>
　　如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xUtils框架中HttpUtils模块源码剖析]]></title>
    <link href="m78snail.com/14779864962440.html"/>
    <updated>2016-11-01T15:48:16+08:00</updated>
    <id>m78snail.com/14779864962440.html</id>
    <content type="html"><![CDATA[
<p>　　xUtils是github上的一个Android开源工具项目，xUtils包含了很多实用的android工具，其中HttpUtils模块是处理网络连接部分。在我上一个项目《数据铁笼》中经常用到，作为与服务器连接的工具，所以想要深入学习一下。<br/>
　　项目最近更新到了3.0，我项目中用到的还是2.6有些方面可能和最新的有出入，请以作者最新的代码为准。<br/>
　　<a href="https://github.com/wyouflf/xUtils3">https://github.com/wyouflf/xUtils3</a><br/>
　　惯例是例举出我在学习中借鉴的一些大神的博客，以此来表示对他们的尊重</p>

<blockquote>
<ol>
<li><a href="http://kb.cnblogs.com/page/130970/#threeconcept">HTTP 协议详解</a></li>
<li><a href="http://www.tuicool.com/articles/nMFb2q">Android开源项目xUtils HttpUtils模块分析</a></li>
<li><a href="http://uule.iteye.com/blog/1539084">Future和FutureTask</a></li>
<li><a href="http://blog.csdn.net/cjj198561/article/details/40475771">xUtils异步HTTP源码分析</a></li>
</ol>
</blockquote>

<p>　　上面这些文章讲的都特别好，大家如果有时间可以都看看。</p>

<span id="more"></span><!-- more -->

<p>　　</p>

<h2 id="toc_0">一 . 以前的HttpClient 方法</h2>

<p>　　首先我先说下以前如果使用Http协议的话，我会使用Apache的HttpClient，大体上分为六步：<br/>
　　<br/>
　　<br/>
　　<strong>以Post方法为例</strong></p>

<pre><code>//第一步创建DefaultHttpClient对象
HttpClient httpClient=new DefaultHttpClient();
//第二步创建HttpPost
HttpPost post=new HttpPost(&quot;http:192.168.3.1:8080/login.jsp&quot;);
//第三步对传递参数进行封装
List&lt;NameValuePairs&gt; params=new ArrayList&lt;NameValuePair&gt;()；
params.add(new BasicNameValuePair(&quot;name&quot;,name));
params.add(new BasicNameValuePair(&quot;pass&quot;,pass));
//第四步为post设置请求参数
post.setEntity(new UriEncodedFormEntity(params,HTTP.UTF_8));
//第五步发送post请求
HttpResponse respones=httpClient.execute(post);
//第六步解析
String msg=EntityUtils.toString(respones.getEntity());
</code></pre>

<p>　　为什么这么详细的介绍Apache 的HttpClient，因为2.6版本中，使用的就是HttpClient，但是在3.0版本中已经替换HttpClient为UrlConnection，这个回来还要再研究下。现在就当复习一遍Apache的HttpClient了吧。<br/>
　　</p>

<h2 id="toc_1">二 . 上Demo，看用法</h2>

<p>废话不多说，先看看怎么用</p>

<pre><code>//第一步设置请求参数的编码
RequestParams params = new RequestParams(); // 默认编码UTF-8
//第二步根据你服务器要求的参数，进行传参
params.setHeader(&quot;Content-Type&quot;, &quot;application/json; charset=utf-8&quot;);
JSONObject object = new JSONObject();
object.put(&quot;policenum&quot;, uLogin.getPolicenum());
object.put(&quot;taskid&quot;, taskid);
String json = JSON.toJSONString(object);
StringEntity entity=null;
try {
        entity = new StringEntity(json, &quot;UTF-8&quot;);
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }
params.setBodyEntity(entity);
//第三步调用HttpUtiles的send方法,可重写这两个方法，作为回调
http.send(HttpRequest.HttpMethod.POST, url,params, 
     new RequestCallBack&lt;String&gt;() {
        @Override
        public void onFailure(HttpException exception, String msg) {}
        @Override
        public void onSuccess(ResponseInfo&lt;String&gt; Response) {});
        }
）
</code></pre>

<h2 id="toc_2">三 . 解析源码</h2>

<h3 id="toc_3">1 . 构造函数</h3>

<p>　　首先我们使用HttpUtils模块，一般都要使用new一个HttpUtils出来，默认的构造函数为</p>

<pre><code> public HttpUtils(int connTimeout, String userAgent) {
        HttpParams params = new BasicHttpParams();
        ConnManagerParams.setTimeout(params, connTimeout);
        HttpConnectionParams.setSoTimeout(params, connTimeout);
        HttpConnectionParams.setConnectionTimeout(params, connTimeout);

        if (TextUtils.isEmpty(userAgent)) {
            userAgent = OtherUtils.getUserAgent(null);
        }
        HttpProtocolParams.setUserAgent(params, userAgent);

        ConnManagerParams.setMaxConnectionsPerRoute(params, new ConnPerRouteBean(10));
        ConnManagerParams.setMaxTotalConnections(params, 10);

        HttpConnectionParams.setTcpNoDelay(params, true);
        HttpConnectionParams.setSocketBufferSize(params, 1024 * 8);
        HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);
  }
</code></pre>

<p>　　这里就不全部截出来了，这里会设置Http协议的一些参数，这些参数往往对于不同的服务器都是固定的，比如采用Http1.1，设置超时时间等等，当然你也可以自己设置，不调用它默认的也可以，根据自己的公司业务要求自己设置。</p>

<h3 id="toc_4">2 . send()方法</h3>

<pre><code class="language-java">public &lt;T&gt; HttpHandler&lt;T&gt; send(HttpRequest.HttpMethod method, String url, RequestParams params, RequestCallBack&lt;T&gt; callBack) {
        if (url == null) 
        throw new IllegalArgumentException(&quot;url may not be null&quot;);
        HttpRequest request = new HttpRequest(method, url);
        return sendRequest(request, params, callBack);
}
</code></pre>

<p>解释下上述参数：<br/>
　　第一个参数 method:HttpRequest.HttpMethod 里面设定好的10种；<br/>
　　第二个参数 url：服务器地址或者接口地址；<br/>
　　第三个参数 params：传给服务器的参数；<br/>
　　第四个参数 callBack：看名字就知道，服务器返回消息后回调的接口，可以重写其中的方法；</p>

<p>　　HttpHandler实际上是一个异步AsyncTask，后面我们会详细解释</p>

<h3 id="toc_5">3 . 重点解析 HttpRequest</h3>

<p>　　全部代码就不截图了HttpRequest（HttpMethod method, String uri），作为参数</p>

<pre><code class="language-java">public HttpRequest(HttpMethod method, String uri) {
        super();
        this.method = method;
        setURI(uri);
}
</code></pre>

<h4 id="toc_6">(1). setRequestParams方法</h4>

<p>主要干了三件事:</p>

<h5 id="toc_7">①保存Header头部</h5>

<pre><code class="language-java">List&lt;RequestParams.HeaderItem&gt; headerItems = param.getHeaders();
</code></pre>

<h5 id="toc_8">②保存entity整体</h5>

<pre><code class="language-java">HttpEntity entity = param.getEntity();
this.setEntity(entity);
</code></pre>

<h5 id="toc_9">③保存回调函数</h5>

<pre><code>entity.setCallBackHandler(callBackHandler);
</code></pre>

<p>　　至此Http协议中的大部分信息都保存到了<strong>HttpRequest</strong>中，函数最后运行:<br/>
　　</p>

<pre><code>handler.executeOnExecutor(EXECUTOR, request);
</code></pre>

<h3 id="toc_10">4 . HttpHandler类：</h3>

<p>　　HttpHandler继承自PriorityAsyncTask，前面我们已经说了HttpHandler实际上是一个异步AsyncTask，让我们直接去HttpHandler继承自PriorityAsyncTask里面看executeOnExecutor方法：<br/>
　　</p>

<pre><code>//EXECUTOR：线程池
//params：参数也就是HttpRequest
public final PriorityAsyncTask&lt;Params,Progress,Result&gt;executeOnExecutor(Executor exec,Params... params) {
        if (mExecuteInvoked) {
            throw new IllegalStateException(&quot;Cannot execute task:&quot;
                    + &quot; the task is already executed.&quot;);
        }

        mExecuteInvoked = true;

        onPreExecute();

        mWorker.mParams = params;
        exec.execute(new PriorityRunnable(priority, mFuture));

       return this;
}
</code></pre>

<pre><code>解释下：

mWorker.mParams = params;
...
private static abstract class WorkerRunnable&lt;Params,Result&gt;implements Callable&lt;Result&gt; {
        Params[] mParams;
    }
</code></pre>

<p>　　mWorker是一个Callable，用于后面的调用这点很重要，因为最后其实就是调用的mWork；</p>

<pre><code class="language-java"> exec.execute(new PriorityRunnable(priority, mFuture));
</code></pre>

<p>　　调用PriorityObject的run方法，会去调用mFuture的run方法，mFuture是一个FutureTask，为什么前面说最后其实会去调用mWorker呢，注意mFuture定义的地方：<br/>
　　</p>

<pre><code>  mFuture = new FutureTask&lt;Result&gt;(mWorker) {
            @Override
            protected void done() {
               ...
            }
  };
</code></pre>

<p>　　我们去找FutureTask的run函数，翻开FutureTask的源码，找到run的源码</p>

<pre><code>public void run() {
       ....
        try {
            Callable&lt;V&gt; c = callable;
            if (c != null &amp;&amp; state == NEW) {
                V result;
                boolean ran;
                try {
        //////////////////////////////这里调用的mWorker的call方法
                    result = c.call();
                    ran = true;
                } catch (Throwable ex) {
                    result = null;
                    ran = false;
                    setException(ex);
                }
                if (ran)
                    set(result);
            }
        } finally {
            ....
        }
}
</code></pre>

<p>　　也就是说最终会去调用mWork的call()方法，那就让我们看看call（）方法<br/>
　　</p>

<pre><code>mWorker = new WorkerRunnable&lt;Params, Result&gt;() {
            public Result call() throws Exception {
              ....
                return postResult(doInBackground(mParams));
            }
};
</code></pre>

<p>　　最终会去最后的BOSS级代码，HttpHandler的doInBackground，其实上面的一系列方法很好理解，就是为了创建异步AsyncTask，以前都只是直接拿AsyncTask来用，根本没想过自己实现一个，分析源码也算是对我自己的一个学习，好了不感概了看一下doInBackground（）：<br/>
首先肯定是要取出来之前保存在HttpRequest里面的各种参数.</p>

<pre><code>request = (HttpRequestBase) params[0];
requestUrl = request.getURI().toString();
</code></pre>

<p>　　接下来就是重头戏发送请求</p>

<pre><code>ResponseInfo&lt;T&gt; responseInfo = sendRequest(request);
</code></pre>

<p>　　看一下sendRequest（）方法：</p>

<pre><code>    ...
 ResponseInfo&lt;T&gt; responseInfo = null;
 if (!isCancelled()) {
    HttpResponse response = client.execute(request, context);
                    responseInfo = handleResponse(response);
                }
    return responseInfo;
    ...
</code></pre>

<p>　　最后调用</p>

<pre><code>this.publishProgress(UPDATE_SUCCESS, responseInfo);
....
case UPDATE_SUCCESS:
        if (values.length != 2) return;
        this.state = State.SUCCESS;
        //回调callback
        callback.onSuccess((ResponseInfo&lt;T&gt;) values[1]);
        break;
</code></pre>

<p>　　xUtils里面还有很多细节我没有说到，大家可以自己去研究下。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[otto 框架分析]]></title>
    <link href="m78snail.com/14779857522449.html"/>
    <updated>2016-11-01T15:35:52+08:00</updated>
    <id>m78snail.com/14779857522449.html</id>
    <content type="html"><![CDATA[
<p>　　最近项目上经常会用到otto框架，它跟EventBus很像，这里希望总结一下：<br/>
　　</p>

<blockquote>
<ul>
<li>运行时动态处理（注解）</li>
<li>IOC 控制反转</li>
<li>观察者模式 EventBus模式</li>
</ul>
</blockquote>

<p>　　大体上要学习otto框架就是上面三个方面，看着名词很高端？没事，让我一一解释一下。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">一 . 运行时动态处理（注解）</h2>

<p>　　我们最初学习安卓的时候最先接触的类恐怕就是Activity了吧，在里面onCreate()这些方法会要求我们重写，在上面会有一个注解@Override,难道仅仅起到注释的作用吗？其实注解分为两种<br/>
　　① 运行时动态处理：在运行时拿到类的Class对象，然后遍历其方法、变量，判断有无注解声明，然后做一些事情<br/>
　　② 编译时动态处理：这类注解会在编译的时候，根据注解标识，动态生成一些类或者生成一些xml都可以，在运行时期，这类注解是没有的~~会依靠动态生成的类做一些操作，因为没有反射，效率和直接调用方法没什么区别<br/>
　　今天我们只研究运行时动态处理。<br/>
　　有句话说得好，叫<strong>无反射没框架</strong>。<br/>
　　任何框架都离不开反射，反射以前只在书本上了解过就是运行时获取对象的类方法，变量吗.现在反射在速度上已经有了很大的提高，我们完全不必担心性能方面会变差很多。<br/>
　　说了半天，你只要记住注解，作为一种标志，可以帮你在你的类加载时替你记住那些你希望以后用来调用的方法和对象。<br/>
　　在otto中最重要的两个注解就是@Subscribe和@Produce，这两个是什么作用等下再说。</p>

<h2 id="toc_1">二 . IOC 控制反转</h2>

<p>　　什么事IOC控制反转？<br/>
　　当A类想使用B类的一个方法时，我们传统的做法是new一个B类实例出来，再去调用方法，但是这就使得A,B两个类纠缠在一起。当我们改变了B类时，所有调用了B类的文件我们都需要去改，这样是不是太麻烦，好的做法是写一个主线类，它会自动帮我们去注入（new）,当我们需要改动时，只要改这个主线类就可以了。这个主线类也就是我要提到的otto框架中的Bus类，这是otto最重要的类，它有什么作用？这玩意就是在类加载时调用register，扫描类中复合命名规范的方法，存到一个map，然后post的时候，查找到匹配的方法，反射调用。不理解？等下我们举个例子你就明白了，现在我们先解释完名词。</p>

<h2 id="toc_2">三 . 观察者模式 EventBus模式</h2>

<p>　　otto框架是基于EventBus框架，这是一个是一个发布 / 订阅的事件总线，大家可以看下鸿洋大神的这篇<a href="http://blog.csdn.net/lmj623565791/article/details/40794879">Android EventBus实战 没听过你就out了</a>讲的特别好</p>

<h2 id="toc_3">四 . 应用实战</h2>

<p>　　任何一个App都一定会提供软件更新功能，当我们在更新过程中突然不想更新了，点击了取消，让我们的代码去调用SplashActivity里面的DoCancelUpdate方法。由于我们的下载更新类是写在UpdateManager类里面，那我们怎么做呢，没学会otto框架之前我们可能会在新建UpdateManager时传进去一个Context，这会不会导致Context引发的内存泄漏，我们需要很小心的检查，现在我们使用otto框架就不需要担心这个问题，因为他们两人几乎没有交集，他们都是通过Bus类来沟通。废话不多说上代码：</p>

<h3 id="toc_4">1 . SplashActivity中让bus注册，并订阅事件</h3>

<pre><code class="language-python">   @Override
    protected void onCreate(Bundle arg0) {
        super.onCreate(arg0);
        BusProvider.getInstance().register(this);
        setContentView(getLayoutResource());
    }
    
    @Subscribe
    public void DoCancelUpdate(CancelUpdateEvent event){
        continueRun();
    } 
</code></pre>

<h3 id="toc_5">2 . BusProvider为一个单例模式类，Bus最好只有一个</h3>

<pre><code class="language-python">public class BusProvider {

    public static Bus bus;

    public static Bus getInstance() {
        if (bus == null) {
            bus = new Bus(ThreadEnforcer.ANY);
        }
        return bus;
    }

    private BusProvider() {
    
    }
}
</code></pre>

<h3 id="toc_6">3 . UpdateManager类中使用post发出事件，凡是订阅了的都会调用</h3>

<pre><code class="language-python">BusProvider.bus.post(new CancelUpdateEvent());
</code></pre>

<p>　　至此算是完成了otto框架的总结，分享一些自己在找资料时遇到的大神博客文章：<br/>
　　<a href="http://blog.csdn.net/lmj623565791/article/details/40794879">Android EventBus实战 没听过你就out了</a><br/>
　　<a href="http://blog.csdn.net/lmj623565791/article/details/39269193">Android 进阶 教你打造 Android 中的 IOC 框架</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dagger2 使用详解(4)--原理分析]]></title>
    <link href="m78snail.com/14839485571061.html"/>
    <updated>2017-01-09T15:55:57+08:00</updated>
    <id>m78snail.com/14839485571061.html</id>
    <content type="html"><![CDATA[
<p>　　前面啰里啰嗦的介绍了Dagger2的基本使用，接下来我们再分析分析实现原理。这里不会分析Dagger2根据注解生成各种代码的原理，关于Java注解以后有机会再写一篇文章来介绍。后面主要分析的是Dagger2生成的各种类如何帮我们实现依赖注入，为了便于理解我这里选了前面相对简单的案例B来做分析。</p>

<span id="more"></span><!-- more -->

<p>　　Dagger2编译期生成的代码位于build/generated/source/apt/debug/your package name/下面:<br/>
<img src="media/14839485571061/14839503268924.jpg" alt="" class="mw_img_center" style="width:300px;display: block; clear:both; margin: 0 auto;"/></p>

<p>　　首先我们看看Dagger2依据依赖提供方MarkCarModule生成的对应工厂类MarkCarModule_ProvideEngineFactory。为了方便大家理解对比，后面我一律会把自己写的类和Dagger2生成的类一并放出来。</p>

<pre><code>/**
* 我们自己的类
*/
@Module
public class MarkCarModule {

    public MarkCarModule(){ }

    @Provides Engine provideEngine(){
        return new Engine(&quot;gear&quot;);
    }
}
</code></pre>

<pre><code>/**
* Dagger2生成的工厂类
*/
public final class MarkCarModule_ProvideEngineFactory implements Factory&lt;Engine&gt; {
  private final MarkCarModule module;

  public MarkCarModule_ProvideEngineFactory(MarkCarModule module) {
    assert module != null;
    this.module = module;
  }

  @Override
  public Engine get() {
    return Preconditions.checkNotNull(
        module.provideEngine(), &quot;Cannot return null from a non-@Nullable @Provides method&quot;);
  }

  public static Factory&lt;Engine&gt; create(MarkCarModule module) {
    return new MarkCarModule_ProvideEngineFactory(module);
  }

  /** Proxies {@link MarkCarModule#provideEngine()}. */
  public static Engine proxyProvideEngine(MarkCarModule instance) {
    return instance.provideEngine();
  }
}
</code></pre>

<p>　　我们可以看到MarkCarModule_ProvideEngineFactory中的get()调用了MarkCarModule的provideEngine()方法来获取我们需要的依赖Engine，MarkCarModule_ProvideEngineFactory的实例化有crate()创建，并且MarkCarModule的实例也是通过create()方法传进来的。那么这个create()一定会在哪里调用的，我们接着往下看。</p>

<p>　　前面提到@Component是依赖提供方(MarkCarModule)和依赖需求方(Car)之前的桥梁，那我看看Dagger2是如何通过CarComponent将两者联系起来的。</p>

<pre><code>/**
* 我们自己的类
*/
@Component(modules = {MarkCarModule.class})
public interface CarComponent {

    void inject(Car car);
}
</code></pre>

<pre><code>/**
* Dagger2生成的CarComponent实现类
*/
public final class DaggerCarComponent implements CarComponent {
  private Provider&lt;Engine&gt; provideEngineProvider;

  private MembersInjector&lt;Car&gt; carMembersInjector;

  private DaggerCarComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static CarComponent create() {
    return builder().build();
  }

  @SuppressWarnings(&quot;unchecked&quot;)
  private void initialize(final Builder builder) {

    this.provideEngineProvider = MarkCarModule_ProvideEngineFactory.create(builder.markCarModule);

    this.carMembersInjector = Car_MembersInjector.create(provideEngineProvider);
  }

  @Override
  public void inject(Car car) {
    carMembersInjector.injectMembers(car);
  }

  public static final class Builder {
    private MarkCarModule markCarModule;

    private Builder() {}

    public CarComponent build() {
      if (markCarModule == null) {
        this.markCarModule = new MarkCarModule();
      }
      return new DaggerCarComponent(this);
    }

    public Builder markCarModule(MarkCarModule markCarModule) {
      this.markCarModule = Preconditions.checkNotNull(markCarModule);
      return this;
    }
  }
}
</code></pre>

<p>　　通过上面的代码我们看到Dagger2依据CarComponent接口生成了实现类DaggerCarComponent（没错这正是我们在Car的构造函数中使用DaggerCarComponent）。DaggerCarComponent在build的时候实例化了DaggerCarComponent对象，并首先调用MarkCarModule_ProvideEngineFactory.create(builder.markCarModule)始化了provideEngineProvider变量，接着调用Car_MembersInjector.create(provideEngineProvider)初始化了carMembersInjector变量。当我们手动在Car类的构造函数中调用inject(Car car)方法时会执行carMembersInjector.injectMembers(car)。所以接下来我们要看看Car_MembersInjector的实现。</p>

<pre><code>public final class Car_MembersInjector implements MembersInjector&lt;Car&gt; {
  private final Provider&lt;Engine&gt; engineProvider;

  public Car_MembersInjector(Provider&lt;Engine&gt; engineProvider) {
    assert engineProvider != null;
    this.engineProvider = engineProvider;
  }

  public static MembersInjector&lt;Car&gt; create(Provider&lt;Engine&gt; engineProvider) {
    return new Car_MembersInjector(engineProvider);
  }

  @Override
  public void injectMembers(Car instance) {
    if (instance == null) {
      throw new NullPointerException(&quot;Cannot inject members into a null reference&quot;);
    }
    instance.engine = engineProvider.get();
  }

  public static void injectEngine(Car instance, Provider&lt;Engine&gt; engineProvider) {
    instance.engine = engineProvider.get();
  }
}
</code></pre>

<p>Car_MembersInjector中的create()用于实例化自己，这个方法前面我们看到是在DaggerCarComponent中调用的。injectMembers(Car instance)将engineProvider.get()的返回值赋给了依赖需求方Car的engine变量，而engineProvider.get()正是本节一开始我们提到的MarkCarModule_ProvideEngineFactory中的get()方法。至此整个依赖注入的流程就完成了。更复杂的应用场景会生成更加复杂的代码，但原理都和前面分析的大同小异。</p>

<p>总结</p>

<p>这篇文章只是通过一些简单的例子介绍了Dagger2的相关概念及使用，实际项目中的应用远比这里的例子要复杂。关于Dagger2在实际项目中的应用可以参照这个开源项目 <br/>
<a href="https://github.com/BaronZ88/MinimalistWeather">BaronZ88/MinimalistWeather</a>（项目采用MVP架构，其中View层和Presenter层的解耦就是通过Dagger2来实现的）。</p>

<p>MinimalistWeather是一款开源天气App，开发此项目主要是为展示各种开源库的使用方式以及Android项目的架构方案，并作为团队开发规范的一部分。项目中每一个字母、每一个命名、每一行代码都是经过仔细考究的；但是由于时间精力有限，项目UI未做严格要求。本着精益求精、提供更好开源项目和更美天气应用的原则，因此期望有兴趣的开发和UED同学可以一起来完成这个项目。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dagger2 使用详解(3)--使用入门]]></title>
    <link href="m78snail.com/14839485560967.html"/>
    <updated>2017-01-09T15:55:56+08:00</updated>
    <id>m78snail.com/14839485560967.html</id>
    <content type="html"><![CDATA[
<p>　　前面长篇大论的基本都在介绍概念，下面我们看看Dagger2的基本应用。关于Dagger2的依赖配置就不在这里占用篇幅去描述了，大家可以到它的github主页下去查看官方教程<a href="https://github.com/google/dagger">https://github.com/google/dagger</a>。接下来我们还是拿前面的Car和Engine来举例。</p>

<span id="more"></span><!-- more -->

<p>　<br/>
<strong>1、案例A</strong></p>

<p>　　Car类是需求依赖方，依赖了Engine类；因此我们需要在类变量Engine上添加@Inject来告诉Dagger2来为自己提供依赖。</p>

<pre><code>public class Car {

    @Inject
    Engine engine;

    public Car() {
        DaggerCarComponent.builder().build().inject(this);
    }

    public Engine getEngine() {
        return this.engine;
    }
}
</code></pre>

<p>　　Engine类是依赖提供方，因此我们需要在它的构造函数上添加@Inject</p>

<pre><code>public class Engine {

    @Inject
    Engine(){}

    public void run(){
        System.out.println(&quot;引擎转起来了~~~&quot;);
    }
}
</code></pre>

<p>　　接下来我们需要创建一个用@Component标注的接口CarComponent，这个CarComponent其实就是一个注入器，这里用来将Engine注入到Car中。</p>

<pre><code>@Component
public interface CarComponent {
    void inject(Car car);
}
</code></pre>

<p>完成这些之后我们需要Build下项目，让Dagger2帮我们生成相关的Java类。接着我们就可以在Car的构造函数中调用Dagger2生成的DaggerCarComponent来实现注入（这其实在前面Car类的代码中已经有了体现）</p>

<pre><code>public Car() {
    DaggerCarComponent.builder().build().inject(this);
}
</code></pre>

<p><strong>2、案例B</strong></p>

<p>　　如果创建Engine的构造函数是带参数的呢？比如说制造一台引擎是需要齿轮(Gear)的。或者Eggine类是我们无法修改的呢？这时候就需要@Module和@Provide上场了。</p>

<p>　　同样我们需要在Car类的成员变量Engine上加上@Inject表示自己需要Dagger2为自己提供依赖；Engine类的构造函数上的@Inject也需要去掉，应为现在不需要通过构造函数上的@Inject来提供依赖了。</p>

<pre><code>public class Car {

    @Inject
    Engine engine;

    public Car() {
        DaggerCarComponent.builder().markCarModule(new MarkCarModule())
                .build().inject(this);
    }

    public Engine getEngine() {
        return this.engine;
    }
}
</code></pre>

<p>接着我们需要一个Module类来生成依赖对象。前面介绍的@Module就是用来标准这个类的，而@Provide则是用来标注具体提供依赖对象的方法（这里有个不成文的规定，被@Provide标注的方法命名我们一般以provide开头，这并不是强制的但有益于提升代码的可读性）。</p>

<pre><code>@Module
public class MarkCarModule {

    public MarkCarModule(){ }

    @Provides Engine provideEngine(){
        return new Engine(&quot;gear&quot;);
    }
}
</code></pre>

<p>　　接下来我们还需要对CarComponent进行一点点修改，之前的@Component注解是不带参数的，现在我们需要加上modules = {MarkCarModule.class}，用来告诉Dagger2提供依赖的是MarkCarModule这个类。</p>

<pre><code>@Component(modules = {MarkCarModule.class})
public interface CarComponent {
    void inject(Car car);
}
</code></pre>

<p>　　Car类的构造函数我们也需要修改，相比之前多了个markCarModule(new MarkCarModule())方法，这就相当于告诉了注入器DaggerCarComponent把MarkCarModule提供的依赖注入到了Car类中。</p>

<pre><code>public Car() {
   DaggerCarComponent.builder()
           .markCarModule(new MarkCarModule())
           .build().inject(this);
}
</code></pre>

<p>这样一个最最基本的依赖注入就完成了，接下来我们测试下我们的代码。</p>

<pre><code>public static void main(String[] args){
    Car car = new Car();
    car.getEngine().run();
}
</code></pre>

<p>输出</p>

<p>引擎转起来了~~~<br/>
<strong>3、案例C</strong></p>

<p>　　那么如果一台汽车有两个引擎（也就是说Car类中有两个Engine变量）怎么办呢？没关系，我们还有@Qulifier！首先我们需要使用Qulifier定义两个注解：</p>

<pre><code>@Qualifier
@Retention(RetentionPolicy.RUNTIME)
public @interface QualifierA { }
@Qualifier
@Retention(RetentionPolicy.RUNTIME)
public @interface QualifierB { }
</code></pre>

<p>同时我们需要对依赖提供方做出修改</p>

<pre><code>@Module
public class MarkCarModule {

    public MarkCarModule(){ }

    @QualifierA
    @Provides
    Engine provideEngineA(){
        return new Engine(&quot;gearA&quot;);
    }

    @QualifierB
    @Provides
    Engine provideEngineB(){
        return new Engine(&quot;gearB&quot;);
    }
}
</code></pre>

<p>接下来依赖需求方Car类同样需要修改</p>

<p>public class Car {</p>

<pre><code>@QualifierA @Inject Engine engineA;
@QualifierB @Inject Engine engineB;

public Car() {
    DaggerCarComponent.builder().markCarModule(new MarkCarModule())
            .build().inject(this);
}

public Engine getEngineA() {
    return this.engineA;
}

public Engine getEngineB() {
    return this.engineB;
}
</code></pre>

<p>}<br/>
最后我们再对Engine类做些调整方便测试</p>

<pre><code>public class Engine {

    private String gear;

    public Engine(String gear){
        this.gear = gear;
    }

    public void printGearName(){
        System.out.println(&quot;GearName:&quot; + gear);
    }
}
</code></pre>

<p>测试代码</p>

<pre><code>public static void main(String[] args) {
    Car car = new Car();
    car.getEngineA().printGearName();
    car.getEngineB().printGearName();
}
</code></pre>

<p>执行结果：</p>

<p>GearName:gearA<br/>
GearName:gearB<br/>
<strong>4、案例D</strong></p>

<p>　　接下来我们看看@Scope是如何限定作用域，实现局部单例的。</p>

<p>　　首先我们需要通过@Scope定义一个CarScope注解：</p>

<pre><code>@Scope
@Retention(RetentionPolicy.RUNTIME)
public @interface CarScope {
}
</code></pre>

<p>　　接着我们需要用这个@CarScope去标记依赖提供方MarkCarModule。</p>

<pre><code>@Module
public class MarkCarModule {

    public MarkCarModule() {
    }

    @Provides
    @CarScope
    Engine provideEngine() {
        return new Engine(&quot;gear&quot;);
    }
}
</code></pre>

<p>同时还需要使用@Scope去标注注入器Compoent</p>

<pre><code>@CarScope
@Component(modules = {MarkCarModule.class})
public interface CarComponent {
    void inject(Car car);
}
</code></pre>

<p>为了便于测试我们对Car和Engine类做了一些改造：</p>

<pre><code>public class Car {

    @Inject Engine engineA;
    @Inject Engine engineB;

    public Car() {
        DaggerCarComponent.builder()
                .markCarModule(new MarkCarModule())
                .build().inject(this);
    }
}
public class Engine {

    private String gear;

    public Engine(String gear){
        System.out.println(&quot;Create Engine&quot;);
        this.gear = gear;
    }
}
</code></pre>

<p>如果我们不适用@Scope,上面的代码会实例化两次Engine类，因此会有两次&quot;Create Engine&quot;输出。现在我们在有@Scope的情况测试下劳动成果：</p>

<p>public static void main(String[] args) {<br/>
    Car car = new Car();</p>

<pre><code>System.out.println(car.engineA.hashCode());
System.out.println(car.engineB.hashCode());
</code></pre>

<p>}<br/>
输出</p>

<p>Create Engine<br/>
bingo！我们确实通过@Scope实现了局部的单例。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dagger2 使用详解(2)--注解]]></title>
    <link href="m78snail.com/14839485563999.html"/>
    <updated>2017-01-09T15:55:56+08:00</updated>
    <id>m78snail.com/14839485563999.html</id>
    <content type="html"><![CDATA[
<p>　　无论是构造函数注入还是接口注入，都避免不了要编写大量的模板代码。机智的猿猿们当然不开心做这些重复性的工作，于是各种依赖注入框架应用而生。但是这么多的依赖注入框架为什么我们却偏爱Dagger2呢？我们先从Spring中的控制反转（IOC）说起。</p>

<span id="more"></span><!-- more -->

<p>　　谈起依赖注入，做过J2EE开发的同学一定会想起Spring IOC，那通过迷之XML来配置依赖的方式真的很让人讨厌；而且XML与Java代码分离也导致代码链难以追踪。之后更加先进的Guice（Android端也有个RoboGuice）出现了，我们不再需要通过XML来配置依赖，但其运行时实现注入的方式让我们在追踪和定位错误的时候却又万分痛苦。开篇提到过Dagger就是受Guice的启发而开发出来的；Dagger继承了前辈的思想，在性能又碾压了它的前辈Guice，可谓是长江后浪推前浪，前浪死在沙滩上。</p>

<p>　　又如开篇我在简介中说到的，Dagger是一种半静态半运行时的DI框架，虽说依赖注入是完全静态的，但是生成有向无环图(DAG)还是基于反射来实现，这无论在大型的服务端应用还是在Android应用上都不是最优方案。升级版的Dagger2解决了这一问题，从半静态变为完全静态，从Map式的API变成申明式API（@Module），生成的代码更优雅高效；而且一旦出错我们在编译期间就能发现。所以Dagger2对开发者的更加友好了，当然Dagger2也因此丧失了一些灵活性，但总体来说利还是远远大于弊的。</p>

<p>　　前面提到这种A B C D E连续依赖的问题，一旦E的创建方式发生了改变就会引发连锁反应，可能会导致A B C D都需要做针对性的修改；但是骚年，你以为为这仅仅是工作量的问题吗？更可怕的是我们创建A时需要按顺序先创建E D C B四个对象，而且必须保证顺序上是正确的。Dagger2就很好的解决了这一问题（不只是Dagger2，在其他DI框架中开发者同样不需要关注这些问题）。</p>

<h2 id="toc_0">Dagger2注解</h2>

<p>　　开篇我们就提到Dagger2是基于Java注解来实现依赖注入的，那么在正式使用之前我们需要先了解下Dagger2中的注解。Dagger2使用过程中我们通常接触到的注解主要包括：@Inject, @Module, @Provides, @Component, @Qulifier, @Scope, @Singleten。</p>

<ul>
<li><p>@Inject：@Inject有两个作用，一是用来标记需要依赖的变量，以此告诉Dagger2为它提供依赖；二是用来标记构造函数，Dagger2通过@Inject注解可以在需要这个类实例的时候来找到这个构造函数并把相关实例构造出来，以此来为被@Inject标记了的变量提供依赖；</p></li>
<li><p>@Module：@Module用于标注提供依赖的类。你可能会有点困惑，上面不是提到用@Inject标记构造函数就可以提供依赖了么，为什么还需要@Module？很多时候我们需要提供依赖的构造函数是第三方库的，我们没法给它加上@Inject注解，又比如说提供以来的构造函数是带参数的，如果我们之所简单的使用@Inject标记它，那么他的参数又怎么来呢？@Module正是帮我们解决这些问题的。</p></li>
<li><p>@Provides：@Provides用于标注Module所标注的类中的方法，该方法在需要提供依赖时被调用，从而把预先提供好的对象当做依赖给标注了@Inject的变量赋值；</p></li>
<li><p>@Component：@Component用于标注接口，是依赖需求方和依赖提供方之间的桥梁。被Component标注的接口在编译时会生成该接口的实现类（如果@Component标注的接口为CarComponent，则编译期生成的实现类为DaggerCarComponent）,我们通过调用这个实现类的方法完成注入；</p></li>
<li><p>@Qulifier：@Qulifier用于自定义注解，也就是说@Qulifier就如同Java提供的几种基本元注解一样用来标记注解类。我们在使用@Module来标注提供依赖的方法时，方法名我们是可以随便定义的（虽然我们定义方法名一般以provide开头，但这并不是强制的，只是为了增加可读性而已）。那么Dagger2怎么知道这个方法是为谁提供依赖呢？答案就是返回值的类型，Dagger2根据返回值的类型来决定为哪个被@Inject标记了的变量赋值。但是问题来了，一旦有多个一样的返回类型Dagger2就懵逼了。@Qulifier的存在正式为了解决这个问题，我们使用@Qulifier来定义自己的注解，然后通过自定义的注解去标注提供依赖的方法和依赖需求方（也就是被@Inject标注的变量），这样Dagger2就知道为谁提供依赖了。----一个更为精简的定义：当类型不足以鉴别一个依赖的时候，我们就可以使用这个注解标示；</p></li>
<li><p>@Scope：@Scope同样用于自定义注解，我能可以通过@Scope自定义的注解来限定注解作用域，实现局部的单例；</p></li>
<li><p>@Singleton：@Singleton其实就是一个通过@Scope定义的注解，我们一般通过它来实现全局单例。但实际上它并不能提前全局单例，是否能提供全局单例还要取决于对应的Component是否为一个全局对象。</p></li>
</ul>

<p>　　我们提到@Inject和@Module都可以提供依赖，那如果我们即在构造函数上通过标记@Inject提供依赖，有通过@Module提供依赖Dagger2会如何选择呢？具体规则如下：</p>

<ul>
<li>步骤1：首先查找@Module标注的类中是否存在提供依赖的方法。</li>
<li>步骤2：若存在提供依赖的方法，查看该方法是否存在参数。
a：若存在参数，则按从步骤1开始依次初始化每个参数；
b：若不存在，则直接初始化该类实例，完成一次依赖注入。</li>
<li>步骤3：若不存在提供依赖的方法，则查找@Inject标注的构造函数，看构造函数是否存在参数。
a：若存在参数，则从步骤1开始依次初始化每一个参数
b：若不存在，则直接初始化该类实例，完成一次依赖注入。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dagger2 使用详解(1)--依赖注入]]></title>
    <link href="m78snail.com/14839485567053.html"/>
    <updated>2017-01-09T15:55:56+08:00</updated>
    <id>m78snail.com/14839485567053.html</id>
    <content type="html"><![CDATA[
<p>　　Dagger-匕首，鼎鼎大名的Square公司旗下又一把利刃（没错！还有一把黄油刀，唤作ButterKnife）；故此给本篇取名神兵利器Dagger2。</p>

<p>　　Dagger2起源于Dagger，是一款基于Java注解来实现的完全在编译阶段完成依赖注入的开源库，主要用于模块间解耦、提高代码的健壮性和可维护性。Dagger2在编译阶段通过apt利用Java注解自动生成Java代码，然后结合手写的代码来自动帮我们完成依赖注入的工作。</p>

<span id="more"></span><!-- more -->

<p>　　起初Square公司受到Guice的启发而开发了Dagger，但是Dagger这种半静态半运行时的框架还是有些性能问题（虽说依赖注入是完全静态的，但是其有向无环图(Directed Acyclic Graph)还是基于反射来生成的，这无论在大型的服务端应用还是在Android应用上都不是最优方案）。因此Google工程师Fork了Dagger项目，对它进行了改造。于是变演变出了今天我们要讨论的Dagger2，所以说Dagger2其实就是高配版的Dagger。</p>

<h2 id="toc_0">依赖注入（Dependency Injection）</h2>

<p>那么什么是依赖注入呢？在解释这个概念前我们先看一小段代码：</p>

<pre><code>public class Car{

    private Engine engine;

    public Car(){
        engine = new Engine();
    }
}
</code></pre>

<p>　　这段Java代码中Car类持有了对Engine实例的引用，我们称之为Car类对Engine类有一个依赖。而依赖注入则是指通过注入的方式实现类与类之间的依赖，下面是常见的三种依赖注入的方式：</p>

<p><strong>1、构造注入：通过构造函数传参给依赖的成员变量赋值，从而实现注入。</strong></p>

<pre><code>public class Car{

    private Engine engine;

    public Car(Engine engine){
        this.engine = engine;
    }
}
</code></pre>

<p><strong>2、接口注入：实现接口方法，同样以传参的方式实现注入。</strong></p>

<pre><code>public interface Injection&lt;T&gt;{

    void inject(T t);
}

public class Car implements Injection&lt;Engine&gt;{

    private Engine engine;

    public Car(){}

    public void inject(Engine engine){
        this.engine = engine;
    }
}
</code></pre>

<p><strong>3、注解注入：使用Java注解在编译阶段生成代码实现注入或者是在运行阶段通过反射实现注入。</strong></p>

<pre><code>public class Car{

    @Inject
    Engine engine;

    public Car(){}
}
</code></pre>

<p>　　前两种注入方式需要我们编写大量的模板代码，而机智的Dagger2则是通过Java注解在编译期来实现依赖注入的。</p>

<h2 id="toc_1">为什么需要依赖注入</h2>

<p>　　我们之所是要依赖注入，最重要的就是为了解耦，达到高内聚低耦合的目的，保证代码的健壮性、灵活性和可维护性。</p>

<p>下面我们看看同一个业务的两种实现方案：</p>

<p><strong>1、方案A</strong></p>

<pre><code>public class Car{

    private Engine engine;
    private List&lt;Wheel&gt; wheels;

    public Car(){
        engine = new Engine();
        wheels = new ArrayList&lt;&gt;();
        for(int i = 0; i &lt; 4; i++){
            wheels.add(new Wheel());
        }
    }

    public void start{
        System.out.println(&quot;启动汽车&quot;);
    }
}

public class CarTest{

    public static void main(String[] args){
        Car car = new Car();
        car.start();
    }
} 
</code></pre>

<p><strong>2、方案B</strong></p>

<pre><code>public class Car{

    private Engine engine;
    private List&lt;Wheel&gt; wheels;

    public Car(Engine engine, List&lt;Wheel&gt; wheels){
        this.engine = engine;
        this.wheels = wheels;
    }

    public void start{
        System.out.println(&quot;启动汽车&quot;);
    }
}

public class CarTest{

    public static void main(String[] args){

        Engine engine = new Engine();
        List&lt;Wheel&gt; wheels = new ArrayList&lt;&gt;();
        for(int i = 0; i &lt; 4; i++){
            wheels.add(new Wheel());
        }
        Car car = new Car(engine, wheels);
        car.start();
    }
}
</code></pre>

<p>　　方案A：由于没有依赖注入，因此需要我们自己是在Car的构造函数中创建Engine和Wheel对象。</p>

<p>　　方案B：我们手动以构造函数的方式注入依赖，将engine和wheels作为参数传入而不是在Car的构造函数中去显示的创建。</p>

<p>　　方案A明显丧失了灵活性，一切依赖都是在Car类的内部创建，Car与Engine和Wheel严重耦合。一旦Engine或者Wheel的创建方式发生了改变，我们就必须要去修改Car类的构造函数（比如说现在创建Wheel实例的构造函数改变了，需要传入Rubber（橡胶）了）；另外我们也没办法替换动态的替换依赖实例（比如我们想把Car的Wheel（轮胎）从邓禄普（轮胎品牌）换成米其林（轮胎品牌）的）。这类问题在大型的商业项目中则更加严重，往往A依赖B、B依赖C、C依赖D、D依赖E；一旦稍有改动便牵一发而动全身，想想都可怕！而依赖注入则很好的帮我们解决了这一问题。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava 你好！]]></title>
    <link href="m78snail.com/14829068226408.html"/>
    <updated>2016-12-28T14:33:42+08:00</updated>
    <id>m78snail.com/14829068226408.html</id>
    <content type="html"><![CDATA[
<p>　　前段时间为 gank.io（干货集中营）网站开发的一款App,采用最流行的Rx全家桶（RxJava+RxAndroid+Retroift）。从开始尝试Rx到现在写出第一个程序，我查阅了很多资料，也踩了很多坑，希望在此记录一下，如果能帮到别人就更好了。</p>

<span id="more"></span><!-- more -->

<p>　　<br/>
　　此篇文章中的代码，都来自于<a href="https://github.com/M78Snail/GoGank">https://github.com/M78Snail/GoGank</a>，这是为<a href="gank.io">gank.io</a>(干货集中营)开发的一款手机App,有兴趣的朋友可以到<a href="http://fir.im/fjke">http://fir.im/fjke</a>下载下来尝试一下。<br/>
　　<img src="media/14827189898326/14827238912458.gif" alt="" class="mw_img_center" style="width:300px;display: block; clear:both; margin: 0 auto;"/></p>

<p>　　本系列文章针对的是项目实战，就不在此啰嗦Rx介绍这些了，我希望谈以下几点：<br/>
　　　</p>

<blockquote>
<ol>
<li>Retroift2解析与okhttp的配合</li>
<li>Retroift2与RxJava的结合</li>
<li>RxJava的常用操作符</li>
</ol>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EasyAndroid (Android面试复习)]]></title>
    <link href="m78snail.com/14779863113216.html"/>
    <updated>2016-11-01T15:45:11+08:00</updated>
    <id>m78snail.com/14779863113216.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">一、项目简介</h2>

<p>　　<a href="https://github.com/M78Snail/EasyAndroid">项目源码：EasyAndroid</a><br/>
　　EasyAndroid是一款专门面向Android开发者的面试复习与关注业内动态的手机App，里面包含知识体系，业内动态，开发技术周报三大模块。<br/>
　　<br/>
<strong>特点：</strong></p>

<ul>
<li><p>知识点归类明细，每一个知识点采用的博文都是经过精心的挑选和改进，确保一个知识点只保留一篇博文。</p></li>
<li><p>博文采用了缓存机制，会根据不同网络环境调整缓存存活时间，给使用者一个良好的体验。</p></li>
<li><p>提供业内动态新闻查看功能，数据爬取自CSDN，提供新闻缓存，方便随时查看。</p></li>
<li><p>每周会提供安卓开发周报，提供给用户最新的开发技术。</p></li>
</ul>

<span id="more"></span><!-- more -->

<p><img src="media/14737385475257/14738207920248.jpg" alt="" class="mw_img_center" style="width:300px;display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_1">二、第三方引用</h2>

<p>1、<a href="https://github.com/daimajia/AndroidSwipeLayout">Swipelayout下拉刷新</a></p>

<p>2、<a href="http://www.bmob.cn/">Bmob移动云服务</a></p>

<p>3、<a href="https://github.com/orhanobut/logger">Logger调试日志插件</a></p>

<p>4、<a href="https://github.com/astuetz/PagerSlidingTabStrip">PagerSlidingTabStrip导航</a></p>

<h2 id="toc_2">三、运行截图</h2>

<p><img src="media/14738219571613/14738389372531.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android技术积累:开发规范]]></title>
    <link href="m78snail.com/14779857522261.html"/>
    <updated>2016-11-01T15:35:52+08:00</updated>
    <id>m78snail.com/14779857522261.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">一. 命名规范</h2>

<h3 id="toc_1">1. 包命名</h3>

<p>域名反写+项目名称+模块名称，全部单词用小写字母。<br/>
例如，我的KAndroid项目的Model模块包名如下：</p>

<pre><code>me.keeganlee.kandroid.model
</code></pre>

<h3 id="toc_2">2. 类和接口命名</h3>

<p>使用大驼峰规则，用名词或名词词组命名，每个单词的首字母大写。<br/>
以下为几种常用类的命名：</p>

<pre><code>activity类，命名以Activity为后缀，如：LoginActivity
fragment类，命名以Fragment为后缀，如：ShareDialogFragment
service类，命名以Service为后缀，如：DownloadService
adapter类，命名以Adapter为后缀，如：CouponListAdapter
工具类，命名以Util为后缀，如：EncryptUtil
模型类，命名以BO为后缀，如：CouponBO
接口实现类，命名以Impl为后缀，如：ApiImpl
</code></pre>

<span id="more"></span><!-- more -->

<h3 id="toc_3">3. 方法命名</h3>

<p>使用小驼峰规则，用动词命名，第一个单词的首字母小写，其他单词的首字母大写。<br/>
以下为几种常用方法的命名：</p>

<pre><code>初始化方法，命名以init开头，例：initView
按钮点击方法，命名以to开头，例：toLogin
设置方法，命名以set开头，例：setData
具有返回值的获取方法，命名以get开头，例：getData
通过异步加载数据的方法，命名以load开头，例：loadData
布尔型的判断方法，命名以is或has，或具有逻辑意义的单词如equals，例：isEmpty
</code></pre>

<h3 id="toc_4">4. 控件缩写</h3>

<table>
<thead>
<tr>
<th style="text-align: center">控件</th>
<th style="text-align: center">缩写</th>
<th style="text-align: center">控件</th>
<th style="text-align: center">缩写</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">TextView</td>
<td style="text-align: center">txt</td>
<td style="text-align: center">ImageButton</td>
<td style="text-align: center">ibtn</td>
</tr>
<tr>
<td style="text-align: center">EditText</td>
<td style="text-align: center">edt</td>
<td style="text-align: center">ListView</td>
<td style="text-align: center">list</td>
</tr>
<tr>
<td style="text-align: center">Button</td>
<td style="text-align: center">btn</td>
<td style="text-align: center">RadioButton</td>
<td style="text-align: center">rbtn</td>
</tr>
<tr>
<td style="text-align: center">ImageView</td>
<td style="text-align: center">img</td>
<td style="text-align: center">SeekBar</td>
<td style="text-align: center">seek</td>
</tr>
<tr>
<td style="text-align: center">RadioGroup</td>
<td style="text-align: center">group</td>
<td style="text-align: center">Spinner</td>
<td style="text-align: center">spinner</td>
</tr>
<tr>
<td style="text-align: center">ProgressBar</td>
<td style="text-align: center">progress</td>
<td style="text-align: center">TableRow</td>
<td style="text-align: center">row</td>
</tr>
<tr>
<td style="text-align: center">CheckBox</td>
<td style="text-align: center">chk</td>
<td style="text-align: center">RelativeLayout</td>
<td style="text-align: center">rlayout</td>
</tr>
<tr>
<td style="text-align: center">TableLayout</td>
<td style="text-align: center">table</td>
<td style="text-align: center">SearchView</td>
<td style="text-align: center">search</td>
</tr>
<tr>
<td style="text-align: center">LinearLayout</td>
<td style="text-align: center">llayout</td>
<td style="text-align: center">TabWidget</td>
<td style="text-align: center">widget</td>
</tr>
<tr>
<td style="text-align: center">ScrollView</td>
<td style="text-align: center">scroll</td>
<td style="text-align: center">TabHost</td>
<td style="text-align: center">host</td>
</tr>
</tbody>
</table>

<h3 id="toc_5">5. 常量命名</h3>

<p>全部为大写单词，单词之间用下划线分开。</p>

<pre><code>public final static int PAGE_SIZE = 20;
</code></pre>

<h3 id="toc_6">6. 变量命名</h3>

<p>{范围描述+}意义描述+类型描述的组合，用驼峰式，首字母小写。</p>

<pre><code>private TextView headerTitleTxt; // 标题栏的标题
private Button loginBtn; // 登录按钮
private CouponBO couponBO; // 券实例
</code></pre>

<h3 id="toc_7">7. 控件id命名</h3>

<p>控件缩写_{范围_}意义，范围可选，只在有明确定义的范围内才需要加上。</p>

<pre><code>&lt;!-- 这是标题栏的标题 --&gt;
    &lt;TextView
    android:id=&quot;@+id/txt_header_title&quot;
    ... /&gt;

&lt;!-- 这是登录按钮 --&gt;
    &lt;Button
    android:id=&quot;@+id/btn_login&quot;
    ... /&gt;
</code></pre>

<h3 id="toc_8">8. layout命名</h3>

<p>组件类型_{范围_}功能，范围可选，只在有明确定义的范围内才需要加上。<br/>
以下为几种常用的组件类型命名：</p>

<pre><code>activity_{范围_}功能，为Activity的命名格式
fragment_{范围_}功能，为Fragment的命名格式
dialog_{范围_}功能，为Dialog的命名格式
item_list_{范围_}功能，为ListView的item命名格式
item_grid_{范围_}功能，为GridView的item命名格式
header_list_{范围_}功能，为ListView的HeaderView命名格式
footer_list_{范围_}功能，为ListView的FooterView命名格式
</code></pre>

<h3 id="toc_9">9. strings的命名</h3>

<p>类型_{范围_}功能，范围可选。<br/>
以下为几种常用的命名：</p>

<pre><code>页面标题，命名格式为：title_页面
按钮文字，命名格式为：btn_按钮事件
标签文字，命名格式为：label_标签文字
选项卡文字，命名格式为：tab_选项卡文字
消息框文字，命名格式为：toast_消息
编辑框的提示文字，命名格式为：hint_提示信息
图片的描述文字，命名格式为：desc_图片文字
对话框的文字，命名格式为：dialog_文字
menu的item文字，命名格式为：action_文字
</code></pre>

<h3 id="toc_10">10. colors的命名</h3>

<p>前缀{_控件}{_范围}{_后缀}，控件、范围、后缀可选，但控件和范围至少要有一个。</p>

<pre><code>背景颜色，添加bg前缀
文本颜色，添加text前缀
分割线颜色，添加div前缀
区分状态时，默认状态的颜色，添加normal后缀
区分状态时，按下时的颜色，添加pressed后缀
区分状态时，选中时的颜色，添加selected后缀
区分状态时，不可用时的颜色，添加disable后缀
</code></pre>

<h3 id="toc_11">11. drawable的命名</h3>

<p>前缀{_控件}{_范围}{_后缀}，控件、范围、后缀可选，但控件和范围至少要有一个。</p>

<pre><code>图标类，添加ic前缀
背景类，添加bg前缀
分隔类，添加div前缀
默认类，添加def前缀
区分状态时，默认状态，添加normal后缀
区分状态时，按下时的状态，添加pressed后缀
区分状态时，选中时的状态，添加selected后缀
区分状态时，不可用时的状态，添加disable后缀
多种状态的，添加selector后缀（一般为ListView的selector或按钮的selector）
</code></pre>

<h3 id="toc_12">12. 动画文件命名</h3>

<p>动画类型_动画方向。</p>

<pre><code>fade_in，淡入
fade_out，淡出
push_down_in，从下方推入
push_down_out，从下方推出
slide_in_from_top，从头部滑动进入
zoom_enter，变形进入
shrink_to_middle，中间缩小
</code></pre>

<h2 id="toc_13">二. 注释规范</h2>

<h3 id="toc_14">1. 文件头注释</h3>

<pre><code>文件顶部统一添加版权声明，声明的格式如下：

/**
 * Copyright (c) 2015. Keegan小钢 Inc. All rights reserved.
 */
</code></pre>

<h3 id="toc_15">2. 类和接口注释</h3>

<p>类和接口统一添加javadoc注释，格式如下：</p>

<pre><code>/**
 * 类或接口的描述信息
 *
 * @author ${USER}
 * @date ${DATE}
 */
</code></pre>

<h3 id="toc_16">3. 方法注释</h3>

<p>下面几种方法，都必须添加javadoc注释，说明该方法的用途和参数说明，以及返回值的说明。</p>

<p>(1).接口中定义的所有方法<br/>
(2).抽象类中自定义的抽象方法<br/>
(3).抽象父类的自定义公用方法<br/>
(4).工具类的公用方法</p>

<pre><code>/**
  * 登录
  *
  * @param loginName 登录名
  * @param password  密码
  * @param listener  回调监听器
  */
public void login(String loginName, String password, ActionCallbackListener&lt;Void&gt; listener);
</code></pre>

<h3 id="toc_17">4. 变量和常量注释</h3>

<p>下面几种情况下的常量和变量，都要添加注释说明，优先采用右侧//来注释，若注释说明太长则在上方添加注释。</p>

<p>(1).接口中定义的所有常量<br/>
 (2).公有类的公有常量<br/>
 (3).枚举类定义的所有枚举常量<br/>
 (4).实体类的所有属性变量</p>

<pre><code>public static final int TYPE_CASH = 1; // 现金券
public static final int TYPE_DEBIT = 2; // 抵扣券
public static final int TYPE_DISCOUNT = 3; // 折扣券
private int id;// 券id
private String name;// 券名称
private String introduce;// 券简介
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[镇远旅行游记]]></title>
    <link href="m78snail.com/14779858228537.html"/>
    <updated>2016-11-01T15:37:02+08:00</updated>
    <id>m78snail.com/14779858228537.html</id>
    <content type="html"><![CDATA[
<p>2016.8.5镇远旅游小记。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">第一天 入住酒店 观夜景 吃烤鱼</h2>

<ul class="example-orbit" data-orbit style="height: 120px;">
  <li>
    <img src="media/14708809297450/14708821760631.jpg" alt="" />
    <div class="orbit-caption">山地水城驿站 1</div>
  </li>
  <li>
    <img src="media/14708809297450/14708822552032.jpg" alt="" />
    <div class="orbit-caption">江景房 2</div>
  </li>
  <li>
    <img src="media/14708809297450/14708844285072.jpg" alt="" />
    <div class="orbit-caption"> 江边烧烤街 3</div>
  </li>
</ul>

<h2 id="toc_1">第二天 游舞阳河</h2>

<div class="large-column">
<a data-orbit-link="headline-1" class="small button">
  舞阳河石碑
</a>
<a data-orbit-link="headline-2" class="small button">
  天眼石
</a>
<a data-orbit-link="headline-3" class="small button">
  舞阳河江景
</a>
<a data-orbit-link="headline-4" class="small button">
  凤凰石
</a>

<div class="orbt-container">
<ul class="example-orbit-content" data-orbit style="height: 58px;">
  <li data-orbit-slide="headline-1">
    <div>
      <img src="media/14708809297450/14708846320662.jpg" alt="" />
    </div>
  </li>
  <li data-orbit-slide="headline-2">
    <div>
      <img src="media/14708809297450/14708846853058.jpg" alt="" />
    </div>
  </li>
  <li data-orbit-slide="headline-3">
    <div>
      <img src="media/14708809297450/14708847291929.jpg" alt="" />
    </div>
  </li>
  <li data-orbit-slide="headline-4">
    <div>
      <img src="media/14708809297450/14708847758845.jpg" alt="" />
    </div>
  </li>
</ul>
</div>
</div>

<h2 id="toc_2">第三天 高过河漂流</h2>

<p><img src="media/14708809297450/14708852478635.jpg" alt=""/></p>

<p>由于怕手机进水，只照了一张出行前的照片。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实用笔记－WebView大讲堂（二）～性能优化]]></title>
    <link href="m78snail.com/14779857522080.html"/>
    <updated>2016-11-01T15:35:52+08:00</updated>
    <id>m78snail.com/14779857522080.html</id>
    <content type="html"><![CDATA[
<p>上一节我总结了下WebView的实用用法：<a href="http://m78star.com/14693271804281.html">实用笔记－WebView大讲堂</a>。这一节我想总结下针对WebView的优化。</p>

<pre><code>1. WebView缓存机制
2. 几种缓存方式的实现
3. 其他的缓存策略
</code></pre>

<span id="more"></span><!-- more -->

<h2 id="toc_0">一 . Android WebView缓存机制</h2>

<p>WebView中存在着两种缓存：网页数据缓存（网页数据，url等）、H5缓存（H5代码缓存数据）</p>

<p>不同的缓存数据会保存在不同的文件目录下.<br/>
当我们加载Html时候，会在我们data/应用package下生成database与cache两个文件夹: </p>

<p>我们请求的Url记录是保存在webviewCache.db里，而url的内容是保存在webviewCache文件夹下。 <br/>
<img src="media/14694992191842/14695000993706.jpg" alt=""/></p>

<p>我们需要首先确保这里设置了缓存可用，才可以继续设置使用何种缓存策略。</p>

<p>下面我们来看一下webview的五种缓存模式： </p>

<pre><code>LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据 
LOAD_DEFAULT: 根据cache-control决定是否从网络上取数据。 
LOAD_CACHE_NORMAL: API level 17中已经废弃, 从API level 11开始作用同LOAD_DEFAULT模式 
LOAD_NO_CACHE: 不使用缓存，只从网络获取数据. 
LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。
</code></pre>

<ul>
<li>几种缓存方式的实现</li>
</ul>

<p>（1）使用LOAD_CACHE_ELSE_NETWORK缓存模式，这样需要在APP退出的时候清除webview缓存，但是这样做有一个弊端就是如果当前App已经是打开状态，网页内容有更新的话不会看到；</p>

<p>（2）使用LOAD_DEFAULT这种缓存方式，数据从缓存中获取还是从网络中获取根据H5页面的参数判断，这样做的好处是可以动态的处理更新内容；</p>

<p>设置缓存</p>

<pre><code>mWebView.getSettings().setJavaScriptEnabled(true); 

mWebView.getSettings().setRenderPriority(RenderPriority.HIGH);

//设置 缓存模式 
mWebView.getSettings().setCacheMode(WebSettings.LOAD_DEFAULT);  

// 开启 DOM storage API 功能     
mWebView.getSettings().setDomStorageEnabled(true); 

//开启 database storage API 功能 
mWebView.getSettings().setDatabaseEnabled(true);  

String cacheDirPath = getFilesDir().getAbsolutePath()+APP_CACAHE_DIRNAME; 
//      String cacheDirPath = getCacheDir().getAbsolutePath()+Constant.APP_DB_DIRNAME; 

Log.i(TAG, &quot;cacheDirPath=&quot;+cacheDirPath); 

//设置数据库缓存路径 
mWebView.getSettings().setDatabasePath(cacheDirPath); 

//设置  Application Caches 缓存目录 
mWebView.getSettings().setAppCachePath(cacheDirPath); 

//开启Application Caches 功能 
mWebView.getSettings().setAppCacheEnabled(true);
</code></pre>

<ul>
<li>退出App时清除缓存</li>
</ul>

<pre><code>//清理Webview缓存数据库 
try { 
    deleteDatabase(&quot;webview.db&quot;);
    deleteDatabase(&quot;webviewCache.db&quot;); 
    } catch (Exception e) { 
            e.printStackTrace(); 
} 

//WebView 缓存文件 
File appCacheDir = new File(getFilesDir().getAbsolutePath()+APP_CACAHE_DIRNAME); 
Log.e(TAG, &quot;appCacheDir path=&quot;+appCacheDir.getAbsolutePath()); 

File webviewCacheDir = new File(getCacheDir().getAbsolutePath()+&quot;/webviewCache&quot;); 
Log.e(TAG, &quot;webviewCacheDir path=&quot;+webviewCacheDir.getAbsolutePath()); 

//删除webview 缓存目录 
if(webviewCacheDir.exists()){ 
     deleteFile(webviewCacheDir); 
} 
//删除webview 缓存 缓存目录 
if(appCacheDir.exists()){ 
     deleteFile(appCacheDir); 
}
</code></pre>

<h2 id="toc_1">二 .其他的缓存策略</h2>

<p>网页在加载的时候暂时不加载图片，当所有的HTML标签加载完成时在加载图片具体的做法如下初始化webview的时候设置不加载图片</p>

<pre><code>webSettings.setBlockNetworkImage(true);
</code></pre>

<p>然后在html标签加载完成之后在加载图片内容:</p>

<pre><code>@Override
    public void onPageFinished(WebView view, String url) {
        super.onPageFinished(view, url);
        mWebView.getSettings().setBlockNetworkImage(false);   
    }
</code></pre>

<p>关于更多的WebView可以参考：<a href="http://blog.csdn.net/qq_23547831/article/details/51820139">WebView问题集锦</a></p>

<p>欢迎大家留言，点赞。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实用笔记－WebView大讲堂（一）]]></title>
    <link href="m78snail.com/14779857521960.html"/>
    <updated>2016-11-01T15:35:52+08:00</updated>
    <id>m78snail.com/14779857521960.html</id>
    <content type="html"><![CDATA[
<p>最近手头的项目界面要改成HTML5的，以前自己对于WebView仅仅只是一知半解，这次想好好总结下，我的博客不喜欢讲太多没用的东西，我追求实用主义，所以我的技术博客，永远只有两个主题：怎么用和怎么优化。典型的拿来主义。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">怎么用？</h2>

<ul>
<li>WebView 基本操作</li>
<li>WebView 下载文件</li>
<li>WebView 注入cookie信息</li>
<li>Webview 中native与js交互</li>
</ul>

<p>暂时只讲解一下这四个方面，以后再添加。</p>

<h3 id="toc_1">一. WebView 基本操作</h3>

<pre><code>mWebView.setWebViewClient() // 帮助WebView处理各种通知、请求事件的

mWebView.setWebChromeClient();// 主要处理解析，渲染网页等浏览器做的事情器

</code></pre>

<p>上面两个方法是你加载一个网页肯定会实现的两个方法。</p>

<pre><code>mWebView.setWebChromeClient(new WebChromeClient(){
           @Override
            public void onReceivedTitle(WebView view, String title) {
                super.onReceivedTitle(view, title);
                txtTitle.setText(title);
            }
        });
 
mWebView.setWebViewClient(new WebViewClient(){
            @Override
            public boolean shouldOverrideUrlLoading(WebView view, String url) {
                view.loadUrl(url);
                return super.shouldOverrideUrlLoading(view, url);
            }
        });
</code></pre>

<p>例子：<br/>
加载百度主页，包含返回按钮，页面地址，刷新。如图：<br/>
<img src="media/14693271804281/14694114281052.jpg" alt="" class="mw_img_center" style="width:200px;display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_2">二. WebView 下载文件</h3>

<p>在WebView的网页里面我们可能要点击链接进行下载，这时候我们首先要新建一个DownloadListener，然后在onDownloadStart（）方法里面我们有两种方式进行下载：</p>

<pre><code>1. 直接调用系统浏览器进行下载
2. 自己编写或使用其他网络框架进行下载文件
</code></pre>

<h4 id="toc_3">(1)调用系统浏览器</h4>

<pre><code>class MyDownload implements DownloadListener {

        @Override
        public void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long l) {
            Uri uri=Uri.parse(url);
            Intent intent=new Intent(Intent.ACTION_VIEW,uri);
            startActivity(intent);
        }
 }
    
mWebView.setDownloadListener(new MyDownload());

</code></pre>

<h4 id="toc_4">(2)自定义下载</h4>

<p>使用普通文件下载方式即可，此处不给出代码了。</p>

<h3 id="toc_5">三. WebView 注入cookie信息</h3>

<p>关于Cookie我就不说了，以登陆csdn作为示例直接说用法：<br/>
1. App在html页面登录<br/>
<img src="media/14693271804281/14694326778770.jpg" alt="" class="mw_img_center" style="width:200px;display: block; clear:both; margin: 0 auto;"/></p>

<pre><code>mWebView.setWebViewClient(new WebViewClient() {
            @Override
            public void onPageFinished(WebView view, String url) {
                super.onPageFinished(view, url);
                CookieManager cookieManager = CookieManager.getInstance();
                String cookie = cookieManager.getCookie(url);
                
            }
});
</code></pre>

<p>通过上面方法可以获取到登陆成功跳转页面以后服务器返回的Cookie,这辆我们可以通过SharedPreferences将Cookie信息保存起来</p>

<p>2.当你再一次进入该页面时，将Cookie通过下面的方法返回给服务器：</p>

<pre><code>private void syncCookie(Context context, String url, String oldcookie) {
        CookieSyncManager.createInstance(context);
        CookieManager cookieManager = CookieManager.getInstance();
        String cookie = cookieManager.getCookie(url);
        cookieManager.setAcceptCookie(true);
        cookieManager.setCookie(url,oldcookie);
        CookieSyncManager.getInstance().sync();
}
</code></pre>

<p>注意：syncCookie函数要在webview.load()之前调用</p>

<h3 id="toc_6">四. Webview 中native与js交互</h3>

<p>通过java代码与js代码直接相互调用的方式实现Android native与H5信息的相互，这里简单的介绍一下使用方式</p>

<h4 id="toc_7">native代码调用H5的js代码</h4>

<p>（1）在H5页面中添加一个js函数</p>

<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;
function uu_click(clicked_id) {
    alert(clicked_id);
}
</code></pre>

<p>（2）在Native中通过java代码调用 <br/>
若这时候H5页面已经被加载到webview中,则可以通过java代码直接调用js函数：</p>

<pre><code>h5Fragment.mWebView.loadUrl(&quot;javascript:uu_click&quot; + &quot;(&#39;&quot; + clickId + &quot;&#39;)&quot;);
</code></pre>

<h4 id="toc_8">js代码调用java函数</h4>

<p>（1）首先在java端编写能够被js代码调用的java函数</p>

<ul>
<li>native方法的实现</li>
</ul>

<pre><code>/**
 * 自定义实现的native函数，可被js代码调用
 */
class JsInteration {
    ...
    @JavascriptInterface
        public void toastMessage(String message) {
            Toast.makeText(getActivity(), message, Toast.LENGTH_LONG).show();
        }
    ...
}
</code></pre>

<p>（2）在native中注入本地方法，供js调用；</p>

<pre><code>mWebView.addJavascriptInterface(new JsInteration(), &quot;control&quot;);
</code></pre>

<p>（3）在js代码中调用java代码：</p>

<pre><code>function reply_click(clicked_id {
    window.control.toastMessage(clicked_id)
}
</code></pre>

<p>关于WebView的四个基本用法就介绍到这里，再下一章会介绍WebView的优化。<br/>
欢迎留言讨论。<br/>
项目示例代码在：<a href="https://github.com/M78Snail/WebViewStudy">https://github.com/M78Snail/WebViewStudy</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio快捷键－Mac版]]></title>
    <link href="m78snail.com/14779858991590.html"/>
    <updated>2016-11-01T15:38:19+08:00</updated>
    <id>m78snail.com/14779858991590.html</id>
    <content type="html"><![CDATA[
<p>从windows转到mac需要改变很多，以前在Android Studio培养的操作习惯也要跟着改变。为了以后工作方便打算总结一下Mac下的Android Studio的一些快捷键。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">Mac下快捷键的符号所对应的按键</h2>

<p><code>⌥</code> —&gt; option|alt<br/>
<code>⇧</code> —&gt; shift<br/>
<code>⌃</code> —&gt; control<br/>
<code>⌘</code> —&gt; command<br/>
<code>⎋</code> —&gt; esc</p>

<pre><code>注: 与F6/F7/F12等F功能键开头的组合的快捷键需要按住fn开启功能键
如：快捷键 ⌘F12 的按键组合为：fn + command + F12
</code></pre>

<h2 id="toc_1">Android Studio 常用快捷键 for mac</h2>

<p><strong>查找／查看相关</strong><br/>
<code>⌘O</code>:  全局查找class类名&lt;使用率非常高&gt;</p>

<p><code>⌘F</code>: 在当前编辑文件中查找&lt;使用率非常高&gt; ｜ 对应window中的Ctrl + F</p>

<p><code>⌘F12</code>：当前编辑的文件中结构快速导航 | 对应window中的 Ctrl + F12</p>

<p><code>⌘E</code>: 打开最近访问的文件列表 | 对应window中的Ctrl + E</p>

<p><code>⌥⌘O</code>: 输入类名／方法名／字段名来查找任何匹配的类／方法／字段&lt;使用率非常高&gt;</p>

<p><code>⇧⌘O</code>: 全局项目查找文件（类／资源文件／布局文件都通过该快捷键查找）&lt;使用率非常高&gt;</p>

<p><code>⌃H</code>: 查看当前编辑class类的hierarchy结构 | 对应window中的Ctrl + H</p>

<p><code>⌥F7</code>: 列出全局项目中该类／方法 被引用／调用的情况&lt;使用率非常高&gt;[比<code>⌥⌘F7</code>显示效果好] | 对应window中的Alt + F7</p>

<p><code>⌃⌥H</code>: 方法被调用结构［method’s Call Hierarchy］| 对应window中的ctrl + alt + h</p>

<p><code>⌘P</code>: 列出函数方法一系列的有效参数，如果光标是一个方法调用的括号之间 | 对应window中的Ctrl + P</p>

<p><code>⌃J</code>: 查看类／方法的注释文档</p>

<p><code>⌥L</code>:代码提示功能</p>

<p><strong>控制操作相关</strong></p>

<p><code>⌘/</code>: 注释与取消注释，注释效果 //... | 对应window中的Ctrl + /</p>

<p><code>⌥⌘/</code>: 注释与取消注释，注释效果 /<em>...</em>/ | 对应window中的Ctrl+Shift+/</p>

<p><code>⇧⌥up/down</code>: 移动行上下移动 | 对应window中的alt + shift + up/down</p>

<p><code>⌘delete</code>: 删除行 ｜ 对应window中的ctrl + y</p>

<p><code>⌘d</code>: 复制行 ｜ 对应window中的 ctrl + d</p>

<p><code>⌘J</code>: 快速生成模版代码块，如if,while,return等&lt;使用频率非常高，高效率编写代码&gt; | 对应window中的Ctrl + J</p>

<p><code>⌘N</code>: 快速生成getter／setter方法，构造方法，toString()方法等 &lt;使用率非常高&gt; | 对应window中的Alt + Insert</p>

<p><code>⌃O</code>: 引入重写父类的方法［Override Methods］&lt;使用率非常高&gt;</p>

<p><code>⌃I</code>: 引入实现接口或抽象类方法［Implement Methods］&lt;使用率非常高&gt;</p>

<p><code>⌃Space</code>: 当申明一个变量时，根据变量类型提示给出建议的变量名称，等还有其他很多智能提示作用&lt;使用率非常高&gt;</p>

<p><code>⌥⌘L</code>: 代码格式化 &lt;使用率非常高&gt; | 对应window中的Ctrl+Alt+L</p>

<p><code>⌘⇧U</code>: 切换选中内容的大小写 &lt;使用率非常高&gt; | 对应window中的Ctrl+Shift+U</p>

<p><code>⌃L</code>:翻译</p>

<p>参考 <a href="http://blog.csdn.net/janice0529/article/details/45322871">http://blog.csdn.net/janice0529/article/details/45322871</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈谈新买的Mac和最近的生活]]></title>
    <link href="m78snail.com/14779858228757.html"/>
    <updated>2016-11-01T15:37:02+08:00</updated>
    <id>m78snail.com/14779858228757.html</id>
    <content type="html"><![CDATA[
<p>大学毕业也快一个月了，脱离了学生的身份，我也正式进入了社会为了生计而打拼。从学生变成打工仔，对于我来说其实影响不是多么大，也许是因为自己本来就不是什么循规蹈矩的好学生吧。<br/>
    在公司实习的时候我就知道公司给每个人办公配的电脑是笔记本，说实话我挺失望的，不过公司有另外一个福利就是自己买电脑公司可以报销4000，前提是3年不能离开公司，这一点倒是挺爽的，因为我所属于的部门出差比较多，所以我打算入手一台MacBook Pro。下面是我用了3天的使用体验。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">Mac</h2>

<p>三天的使用带给我以下5点，最直观的使用感受：</p>

<ul>
<li>1. 超细致的屏幕视觉</li>
<li>2. 精致的外观感受</li>
<li>3. 超强的电池续航</li>
<li>4. 秒杀一切电脑厂商的触摸板</li>
<li>5. 良好的苹果生态</li>
</ul>

<p><img src="media/14690075075215/14690892264815.jpg" alt="" class="mw_img_center" style="width:200px;display: block; clear:both; margin: 0 auto;"/></p>

<p>有人说Mac 有什么好的，同样的电脑配置，别的牌子价格可能低3，4千，说实话我以前也是这么觉得，觉得Mac就是装逼而已，但是用了以后才会发现 苹果这家公司觉不是那些仅仅为追求表明上的性能数值的公司可以比的。细腻到每一个触控按键，超人性化的设计。真的是用过苹果的产品，你再也不会想要去用别家的产品了。</p>

<h2 id="toc_1">贵阳出差</h2>

<p>说完了Mac想谈几句贵阳出差的事情。公司是做大数据平台的，在贵阳这边有项目。才刚毕业没多久就要出差，也算是过上了四海为家的日子，不愿意去考虑太多的事情，做好眼前的事情吧。<br/>
贵阳这里我是第二次来了，上一次还是冬天的时候过来实习，贵阳的冬天冷啊，山里的风又大，这一次正好是酷暑7月，全国很多地方都能把人热死，但是贵阳的夏天真的舒服，不是狠毒的太阳，凉爽的风拂过脸庞，还有那未被污染的蓝蓝的天空，这里真的像世外桃源。<br/>
现在的我很快乐，来到贵阳，这里有脾气超好的鹏哥，有脾气相投的哥们，当然还有我最爱的女朋友，嘿嘿。</p>

<hr/>

<p><img src="media/14690075075215/14690892999707.jpg" alt="" class="mw_img_center" style="width:300px;display: block; clear:both; margin: 0 auto;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[找女朋友之简单工厂模式，工厂模式，抽象工厂模式]]></title>
    <link href="m78snail.com/14871411019561.html"/>
    <updated>2017-02-15T14:45:01+08:00</updated>
    <id>m78snail.com/14871411019561.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">一、 简单工厂模式</h2>

<ul>
<li>突然有一天，在梦里拥有了阿拉丁神灯.</li>
<li>灯神说: &quot;我可以给你创造一个女朋友哦&quot;</li>
<li>这时候我的心里...嘿嘿嘿...</li>
<li>&quot;但是只能满足你一个地理条件，目前只有三个选项: 四川, 河北, 山东. 你挑一个? &quot; 灯神又说.</li>
<li>&quot;那我选: 四川...或者...&quot;</li>
<li>没等我说完，嘭的一下，出来个一个火辣的川妹子...</li>
</ul>

<span id="more"></span><!-- more -->

<p><strong>用代码来展示就是:</strong></p>

<pre><code>// 神灯拥有的三种选项
public enum GFType {
      SI_CHUAN,
      HE_BEI,
      SHAN_DONG
}
</code></pre>

<hr/>

<pre><code>// 和女朋友吃什么由她的家乡口味来定，但是shopping是一定的了 -_-
public abstract class BaseGF {
      public abstract void eatFood();
      public void shopping() {
            System.out.println(&quot;Go shopping every day...&quot;);
      };
}
</code></pre>

<hr/>

<pre><code>public class SiChuanGF extends BaseGF {
      @Override
      public void eatFood() {
            System.out.println(&quot;Eat sichuan food...&quot;);
      }
}
</code></pre>

<hr/>

<pre><code>public class ShanDongGF extends BaseGF {
      @Override
      public void eatFood() {
            System.out.println(&quot;Eat shandong food...&quot;);
      }
}
</code></pre>

<hr/>

<pre><code>// 神灯为我们创建女朋友的工厂
public class GFFactory {
      public static BaseGF createGF(GFType gFType) {
            switch (gFType) {
                  case SI_CHUAN:
                        return new SiChuanGF();
                  case SHAN_DONG:
                        return new ShanDongGF();
                  default:
                  case HE_BEI:
                        return new HeBeiGF();
            }
      }
}
</code></pre>

<hr/>

<pre><code>// 这个就是神灯的创建女朋友的程序了
public class Main {
      public static void main(String[] args) {
            BaseGF siChuanGirl = GFFactory.createGF(GFType.SI_CHUAN);
            siChuanGirl.eatFood();
            siChuanGirl.shopping();

//          BaseGF shanDongGirl = GFFactory.createGF(GFType.SHAN_DONG);
//          shanDongGirl.eatFood();
//          shanDongGirl.shopping();
//          
//          BaseGF heBeiGirl = GFFactory.createGF(GFType.HE_BEI);
//          heBeiGirl.eatFood();
//          heBeiGirl.shopping();
      }
}

// 有了女朋友之后是这样的 -_-
Eat sichuan food...
Go shopping every day...
// Eat shandong food...
// Go shopping every day...
// Eat hebei food...
// Go shopping every day...
</code></pre>

<p>简单工厂模式: 专门定义一个类用来负责创建其他类的实例，被创建的实例通常都具有共同的父类.<br/>
<img src="media/14871411019561/14871415118517.jpg" alt="" class="mw_img_center" style="width:400px;display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_1">二、 工厂模式</h2>

<ul>
<li>因为我刚才还没决定，神灯就帮我把川妹子创建出来了，所以我嘟囔着，我这还没决定呢啊，大哥，你这手速有点快吧</li>
<li>神灯: &quot;...你这个人真的是难伺候&quot;</li>
<li>我: &quot;我能不能要一个彩云之南的妹子? &quot;</li>
<li>神灯: &quot;彩云之南是哪? &quot;</li>
<li>我: &quot;云南啊&quot;</li>
<li>神灯: &quot;...你怎么这么麻烦，你知道我要改多少东西吗，我的enum(GFType)要改, GFFactory要增加case&quot;</li>
<li>我: &quot;神灯大哥，好人做到底么，好不好? &quot;</li>
<li>神灯: &quot;要不我给你一个接口好了，你自己想创建哪里的就创建那里的&quot;</li>
<li>我的内心...嘿嘿嘿...</li>
</ul>

<p><strong>用代码展示就是:</strong></p>

<pre><code>// 创建女朋友的接口，想要哪里的女朋友，实现这个接口就可以了
public interface IGFFactory {
      BaseGF createGF();
}
</code></pre>

<hr/>

<pre><code>// 没有改变
public abstract class BaseGF {
      public abstract void eatFood();
      public void shopping() {
            System.out.println(&quot;Go shopping every day...&quot;);
      };
}
</code></pre>

<hr/>

<pre><code>// 创建川妹子的工厂
public class SiChuanGFFactory implements IGFFactory {
      @Override
      public BaseGF createGF() {
            return new SiChuanGF();
      }
}
</code></pre>

<hr/>

<pre><code>// 这个类也没有改变
public class SiChuanGF extends BaseGF {
      @Override
      public void eatFood() {
            System.out.println(&quot;Eat sichuan food...&quot;);
      }
}
</code></pre>

<hr/>

<pre><code>// 我想要的云南的妹子的创建工厂
public class YunNanGFFactory implements IGFFactory {
      @Override
      public BaseGF createGF() {
            return new YunNanGF();
      }
}
</code></pre>

<hr/>

<pre><code>// 云南妹子
public class YunNanGF extends BaseGF {
      @Override
      public void eatFood() {
            System.out.println(&quot;Eat 牛干巴, 炸土豆, 小锅米线, 卤米线...&quot;);
      }
}
</code></pre>

<hr/>

<pre><code>// 这个时候一切准备就绪，创建一个云南的妹子吧...嘿嘿嘿...嘭...
public class Main {
      public static void main(String[] args) {
            IGFFactory yunNanGFFactory = new YunNanGFFactory();
            BaseGF yunNanGF = yunNanGFFactory.createGF();
            yunNanGF.eatFood();
            yunNanGF.shopping();

//          IGFFactory siChuanGFFactory = new SiChuanGFFactory();
//          BaseGF siChuanGF = siChuanGFFactory.createGF();
//          siChuanGF.eatFood();
//          siChuanGF.shopping();
      }
}
// 有了个云南妹子，然后就开始吃各种小吃了
Eat 牛干巴, 炸土豆, 小锅米线, 卤米线...
Go shopping every day...
// Eat sichuan food...
// Go shopping every day...
</code></pre>

<p>从此我和我的云南妹子过上了幸福的生活<br/>
工厂模式： 定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类.<br/>
<img src="media/14871411019561/14871426106976.jpg" alt="" class="mw_img_center" style="width:400px;display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_2">三、 抽象工厂模式</h2>

<ul>
<li>好多年以后，我准备和我的云南妹子准备结婚了. 但是我们发现好像少点什么，对，就是妹子的父母还没见啊. 然后我们去找神灯大哥帮忙.</li>
<li>神灯说: &quot;小子，挺幸福呗&quot;</li>
<li>我说: &quot;还得多谢神灯大哥啊，全都靠你&quot;</li>
<li>神灯: &quot;来找我是不是有什么需求啊(内心: 是不是又特么改需求了)? &quot;</li>
<li>我: &quot;我还没见过妹子的父母咧，帮帮忙啊&quot;</li>
<li>神灯: &quot;...&quot;
<strong>用代码展示(以妹子的父亲为例子):</strong></li>
</ul>

<pre><code>// IGFFactory增加一个创建妹子父亲的方法
public interface IGFFactory {
      BaseGF createGF();
      IGFFather createGFFather();
}
</code></pre>

<hr/>

<pre><code>// 父亲接口
public interface IGFFather {
      // 对于闺女和我的事情的建议
      void suggestionToGirl();
}
</code></pre>

<hr/>

<pre><code>public class SiChuanGFFactory implements IGFFactory {
      @Override
      public BaseGF createGF() {
            return new SiChuanGF();
      }

      @Override
      public IGFFather createGFFather() {
            return new SiChuanGFFather();
      }
}
</code></pre>

<hr/>

<pre><code>// 四川妹子的父亲实现类
public class SiChuanGFFather implements IGFFather {
      @Override
      public void suggestionToGirl() {
            // 同意了
            System.out.println(&quot;Agree ...&quot;);    
      }
}
</code></pre>

<hr/>

<pre><code>public class YunNanGFFactory implements IGFFactory {
      @Override
      public BaseGF createGF() {
            return new YunNanGF();
      }

      @Override
      public IGFFather createGFFather() {
            return new YunNanGFFather();
      }
}
</code></pre>

<hr/>

<pre><code>// 云南妹子的父亲实现类
public class YunNanGFFather implements IGFFather {
      @Override
      public void suggestionToGirl() {
            // 不发表意见...
            System.out.println(&quot;Silence ...&quot;);
      }
}
</code></pre>

<hr/>

<pre><code>// 我们又一次找到了神灯，满意了吧
public class Main {
      public static void main(String[] args) {
            IGFFactory yunNanGFFactory = new YunNanGFFactory();
            BaseGF yunNanGF = yunNanGFFactory.createGF();
            yunNanGF.eatFood();
            yunNanGF.shopping();

            IGFFather yunNanGFFather = yunNanGFFactory.createGFFather();
            yunNanGFFather.suggestionToGirl();

//          IGFFactory siChuanGFFactory = new SiChuanGFFactory();
//          BaseGF siChuanGF = siChuanGFFactory.createGF();
//          siChuanGF.eatFood();
//          siChuanGF.shopping();
//          
//          IGFFather siChuanGFFather = siChuanGFFactory.createGFFather();
//          siChuanGFFather.suggestionToGirl();
      }
}

// 结果是这样滴...
Eat 牛干巴, 炸洋芋, 小锅米线, 卤米线...
Go shopping every day...
Silence ...
// Eat sichuan food...
// Go shopping every day...
// Agree ...
</code></pre>

<p>抽象工厂模式: 提供一个创建一系列相关或者相互依赖对象的接口，而无需指定他们具体的类.<br/>
<img src="media/14871411019561/14871428831254.jpg" alt="" class="mw_img_center" style="width:400px;display: block; clear:both; margin: 0 auto;"/></p>

]]></content>
  </entry>
  
</feed>
